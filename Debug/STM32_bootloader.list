
STM32_bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020dc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  080021e8  080021e8  000031e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800225c  0800225c  0000405c  2**0
                  CONTENTS
  4 .ARM          00000000  0800225c  0800225c  0000405c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800225c  0800225c  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800225c  0800225c  0000325c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002260  08002260  00003260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08002264  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  2000005c  080022c0  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  080022c0  00004260  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000792b  00000000  00000000  00004085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ad1  00000000  00000000  0000b9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000750  00000000  00000000  0000d488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000574  00000000  00000000  0000dbd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017695  00000000  00000000  0000e14c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a2ea  00000000  00000000  000257e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000829d4  00000000  00000000  0002facb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b249f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002038  00000000  00000000  000b24e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  000b451c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	080021d0 	.word	0x080021d0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	080021d0 	.word	0x080021d0

0800014c <vBL_SendMsg>:
static uint8_t u8BL_FlashMemoryPayloadWrite(uint16_t * pdata,uint32_t StartAddress, uint8_t PayloadLen);

static uint32_t Perform_Flash_Erase(uint32_t PageAddress , uint8_t PageNumber);
uint16_t counter_;
void vBL_SendMsg(char * format , ...)
{
 800014c:	b40f      	push	{r0, r1, r2, r3}
 800014e:	b580      	push	{r7, lr}
 8000150:	b09a      	sub	sp, #104	@ 0x68
 8000152:	af00      	add	r7, sp, #0
	char message [100U]={0U};
 8000154:	2300      	movs	r3, #0
 8000156:	607b      	str	r3, [r7, #4]
 8000158:	f107 0308 	add.w	r3, r7, #8
 800015c:	2260      	movs	r2, #96	@ 0x60
 800015e:	2100      	movs	r1, #0
 8000160:	4618      	mov	r0, r3
 8000162:	f001 fba5 	bl	80018b0 <memset>
	va_list args ;
	va_start(args,format);
 8000166:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800016a:	603b      	str	r3, [r7, #0]
	vsprintf(message,format,args);
 800016c:	1d3b      	adds	r3, r7, #4
 800016e:	683a      	ldr	r2, [r7, #0]
 8000170:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8000172:	4618      	mov	r0, r3
 8000174:	f001 fb92 	bl	800189c <vsiprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)message,sizeof(message),HAL_MAX_DELAY);
 8000178:	1d39      	adds	r1, r7, #4
 800017a:	f04f 33ff 	mov.w	r3, #4294967295
 800017e:	2264      	movs	r2, #100	@ 0x64
 8000180:	4804      	ldr	r0, [pc, #16]	@ (8000194 <vBL_SendMsg+0x48>)
 8000182:	f001 f9a1 	bl	80014c8 <HAL_UART_Transmit>
	va_end(args);

}
 8000186:	bf00      	nop
 8000188:	3768      	adds	r7, #104	@ 0x68
 800018a:	46bd      	mov	sp, r7
 800018c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000190:	b004      	add	sp, #16
 8000192:	4770      	bx	lr
 8000194:	20000084 	.word	0x20000084

08000198 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800019c:	4b06      	ldr	r3, [pc, #24]	@ (80001b8 <MX_CRC_Init+0x20>)
 800019e:	4a07      	ldr	r2, [pc, #28]	@ (80001bc <MX_CRC_Init+0x24>)
 80001a0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80001a2:	4805      	ldr	r0, [pc, #20]	@ (80001b8 <MX_CRC_Init+0x20>)
 80001a4:	f000 fb8f 	bl	80008c6 <HAL_CRC_Init>
 80001a8:	4603      	mov	r3, r0
 80001aa:	2b00      	cmp	r3, #0
 80001ac:	d001      	beq.n	80001b2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80001ae:	f000 f8a4 	bl	80002fa <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80001b2:	bf00      	nop
 80001b4:	bd80      	pop	{r7, pc}
 80001b6:	bf00      	nop
 80001b8:	20000078 	.word	0x20000078
 80001bc:	40023000 	.word	0x40023000

080001c0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80001c0:	b480      	push	{r7}
 80001c2:	b085      	sub	sp, #20
 80001c4:	af00      	add	r7, sp, #0
 80001c6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	4a09      	ldr	r2, [pc, #36]	@ (80001f4 <HAL_CRC_MspInit+0x34>)
 80001ce:	4293      	cmp	r3, r2
 80001d0:	d10b      	bne.n	80001ea <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80001d2:	4b09      	ldr	r3, [pc, #36]	@ (80001f8 <HAL_CRC_MspInit+0x38>)
 80001d4:	695b      	ldr	r3, [r3, #20]
 80001d6:	4a08      	ldr	r2, [pc, #32]	@ (80001f8 <HAL_CRC_MspInit+0x38>)
 80001d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80001dc:	6153      	str	r3, [r2, #20]
 80001de:	4b06      	ldr	r3, [pc, #24]	@ (80001f8 <HAL_CRC_MspInit+0x38>)
 80001e0:	695b      	ldr	r3, [r3, #20]
 80001e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80001e6:	60fb      	str	r3, [r7, #12]
 80001e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80001ea:	bf00      	nop
 80001ec:	3714      	adds	r7, #20
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	40023000 	.word	0x40023000
 80001f8:	40021000 	.word	0x40021000

080001fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	b085      	sub	sp, #20
 8000200:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000202:	4b14      	ldr	r3, [pc, #80]	@ (8000254 <MX_GPIO_Init+0x58>)
 8000204:	699b      	ldr	r3, [r3, #24]
 8000206:	4a13      	ldr	r2, [pc, #76]	@ (8000254 <MX_GPIO_Init+0x58>)
 8000208:	f043 0320 	orr.w	r3, r3, #32
 800020c:	6193      	str	r3, [r2, #24]
 800020e:	4b11      	ldr	r3, [pc, #68]	@ (8000254 <MX_GPIO_Init+0x58>)
 8000210:	699b      	ldr	r3, [r3, #24]
 8000212:	f003 0320 	and.w	r3, r3, #32
 8000216:	60fb      	str	r3, [r7, #12]
 8000218:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800021a:	4b0e      	ldr	r3, [pc, #56]	@ (8000254 <MX_GPIO_Init+0x58>)
 800021c:	699b      	ldr	r3, [r3, #24]
 800021e:	4a0d      	ldr	r2, [pc, #52]	@ (8000254 <MX_GPIO_Init+0x58>)
 8000220:	f043 0304 	orr.w	r3, r3, #4
 8000224:	6193      	str	r3, [r2, #24]
 8000226:	4b0b      	ldr	r3, [pc, #44]	@ (8000254 <MX_GPIO_Init+0x58>)
 8000228:	699b      	ldr	r3, [r3, #24]
 800022a:	f003 0304 	and.w	r3, r3, #4
 800022e:	60bb      	str	r3, [r7, #8]
 8000230:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000232:	4b08      	ldr	r3, [pc, #32]	@ (8000254 <MX_GPIO_Init+0x58>)
 8000234:	699b      	ldr	r3, [r3, #24]
 8000236:	4a07      	ldr	r2, [pc, #28]	@ (8000254 <MX_GPIO_Init+0x58>)
 8000238:	f043 0308 	orr.w	r3, r3, #8
 800023c:	6193      	str	r3, [r2, #24]
 800023e:	4b05      	ldr	r3, [pc, #20]	@ (8000254 <MX_GPIO_Init+0x58>)
 8000240:	699b      	ldr	r3, [r3, #24]
 8000242:	f003 0308 	and.w	r3, r3, #8
 8000246:	607b      	str	r3, [r7, #4]
 8000248:	687b      	ldr	r3, [r7, #4]

}
 800024a:	bf00      	nop
 800024c:	3714      	adds	r7, #20
 800024e:	46bd      	mov	sp, r7
 8000250:	bc80      	pop	{r7}
 8000252:	4770      	bx	lr
 8000254:	40021000 	.word	0x40021000

08000258 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800025c:	f000 f9ee 	bl	800063c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000260:	f000 f810 	bl	8000284 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000264:	f7ff ffca 	bl	80001fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000268:	f000 f8e8 	bl	800043c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800026c:	f000 f910 	bl	8000490 <MX_USART3_UART_Init>
  MX_CRC_Init();
 8000270:	f7ff ff92 	bl	8000198 <MX_CRC_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  char string []="hello bootloader";
  vBL_SendMsg("hello bootloader %d",9);
 8000274:	2109      	movs	r1, #9
 8000276:	4802      	ldr	r0, [pc, #8]	@ (8000280 <main+0x28>)
 8000278:	f7ff ff68 	bl	800014c <vBL_SendMsg>
  while (1)
 800027c:	bf00      	nop
 800027e:	e7fd      	b.n	800027c <main+0x24>
 8000280:	080021e8 	.word	0x080021e8

08000284 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b090      	sub	sp, #64	@ 0x40
 8000288:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028a:	f107 0318 	add.w	r3, r7, #24
 800028e:	2228      	movs	r2, #40	@ 0x28
 8000290:	2100      	movs	r1, #0
 8000292:	4618      	mov	r0, r3
 8000294:	f001 fb0c 	bl	80018b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000298:	1d3b      	adds	r3, r7, #4
 800029a:	2200      	movs	r2, #0
 800029c:	601a      	str	r2, [r3, #0]
 800029e:	605a      	str	r2, [r3, #4]
 80002a0:	609a      	str	r2, [r3, #8]
 80002a2:	60da      	str	r2, [r3, #12]
 80002a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002a6:	2302      	movs	r3, #2
 80002a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002aa:	2301      	movs	r3, #1
 80002ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ae:	2310      	movs	r3, #16
 80002b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002b2:	2300      	movs	r3, #0
 80002b4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b6:	f107 0318 	add.w	r3, r7, #24
 80002ba:	4618      	mov	r0, r3
 80002bc:	f000 fca4 	bl	8000c08 <HAL_RCC_OscConfig>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002c6:	f000 f818 	bl	80002fa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ca:	230f      	movs	r3, #15
 80002cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002ce:	2300      	movs	r3, #0
 80002d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d2:	2300      	movs	r3, #0
 80002d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002d6:	2300      	movs	r3, #0
 80002d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002da:	2300      	movs	r3, #0
 80002dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	2100      	movs	r1, #0
 80002e2:	4618      	mov	r0, r3
 80002e4:	f000 ff12 	bl	800110c <HAL_RCC_ClockConfig>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002ee:	f000 f804 	bl	80002fa <Error_Handler>
  }
}
 80002f2:	bf00      	nop
 80002f4:	3740      	adds	r7, #64	@ 0x40
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}

080002fa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002fa:	b480      	push	{r7}
 80002fc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002fe:	b672      	cpsid	i
}
 8000300:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000302:	bf00      	nop
 8000304:	e7fd      	b.n	8000302 <Error_Handler+0x8>
	...

08000308 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000308:	b480      	push	{r7}
 800030a:	b085      	sub	sp, #20
 800030c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800030e:	4b15      	ldr	r3, [pc, #84]	@ (8000364 <HAL_MspInit+0x5c>)
 8000310:	699b      	ldr	r3, [r3, #24]
 8000312:	4a14      	ldr	r2, [pc, #80]	@ (8000364 <HAL_MspInit+0x5c>)
 8000314:	f043 0301 	orr.w	r3, r3, #1
 8000318:	6193      	str	r3, [r2, #24]
 800031a:	4b12      	ldr	r3, [pc, #72]	@ (8000364 <HAL_MspInit+0x5c>)
 800031c:	699b      	ldr	r3, [r3, #24]
 800031e:	f003 0301 	and.w	r3, r3, #1
 8000322:	60bb      	str	r3, [r7, #8]
 8000324:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000326:	4b0f      	ldr	r3, [pc, #60]	@ (8000364 <HAL_MspInit+0x5c>)
 8000328:	69db      	ldr	r3, [r3, #28]
 800032a:	4a0e      	ldr	r2, [pc, #56]	@ (8000364 <HAL_MspInit+0x5c>)
 800032c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000330:	61d3      	str	r3, [r2, #28]
 8000332:	4b0c      	ldr	r3, [pc, #48]	@ (8000364 <HAL_MspInit+0x5c>)
 8000334:	69db      	ldr	r3, [r3, #28]
 8000336:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800033a:	607b      	str	r3, [r7, #4]
 800033c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800033e:	4b0a      	ldr	r3, [pc, #40]	@ (8000368 <HAL_MspInit+0x60>)
 8000340:	685b      	ldr	r3, [r3, #4]
 8000342:	60fb      	str	r3, [r7, #12]
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800034a:	60fb      	str	r3, [r7, #12]
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000352:	60fb      	str	r3, [r7, #12]
 8000354:	4a04      	ldr	r2, [pc, #16]	@ (8000368 <HAL_MspInit+0x60>)
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800035a:	bf00      	nop
 800035c:	3714      	adds	r7, #20
 800035e:	46bd      	mov	sp, r7
 8000360:	bc80      	pop	{r7}
 8000362:	4770      	bx	lr
 8000364:	40021000 	.word	0x40021000
 8000368:	40010000 	.word	0x40010000

0800036c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000370:	bf00      	nop
 8000372:	e7fd      	b.n	8000370 <NMI_Handler+0x4>

08000374 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000378:	bf00      	nop
 800037a:	e7fd      	b.n	8000378 <HardFault_Handler+0x4>

0800037c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000380:	bf00      	nop
 8000382:	e7fd      	b.n	8000380 <MemManage_Handler+0x4>

08000384 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000388:	bf00      	nop
 800038a:	e7fd      	b.n	8000388 <BusFault_Handler+0x4>

0800038c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000390:	bf00      	nop
 8000392:	e7fd      	b.n	8000390 <UsageFault_Handler+0x4>

08000394 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000398:	bf00      	nop
 800039a:	46bd      	mov	sp, r7
 800039c:	bc80      	pop	{r7}
 800039e:	4770      	bx	lr

080003a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003a4:	bf00      	nop
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bc80      	pop	{r7}
 80003aa:	4770      	bx	lr

080003ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003b0:	bf00      	nop
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bc80      	pop	{r7}
 80003b6:	4770      	bx	lr

080003b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003bc:	f000 f984 	bl	80006c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003c0:	bf00      	nop
 80003c2:	bd80      	pop	{r7, pc}

080003c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b086      	sub	sp, #24
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80003cc:	4a14      	ldr	r2, [pc, #80]	@ (8000420 <_sbrk+0x5c>)
 80003ce:	4b15      	ldr	r3, [pc, #84]	@ (8000424 <_sbrk+0x60>)
 80003d0:	1ad3      	subs	r3, r2, r3
 80003d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80003d4:	697b      	ldr	r3, [r7, #20]
 80003d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80003d8:	4b13      	ldr	r3, [pc, #76]	@ (8000428 <_sbrk+0x64>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d102      	bne.n	80003e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80003e0:	4b11      	ldr	r3, [pc, #68]	@ (8000428 <_sbrk+0x64>)
 80003e2:	4a12      	ldr	r2, [pc, #72]	@ (800042c <_sbrk+0x68>)
 80003e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80003e6:	4b10      	ldr	r3, [pc, #64]	@ (8000428 <_sbrk+0x64>)
 80003e8:	681a      	ldr	r2, [r3, #0]
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	4413      	add	r3, r2
 80003ee:	693a      	ldr	r2, [r7, #16]
 80003f0:	429a      	cmp	r2, r3
 80003f2:	d207      	bcs.n	8000404 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80003f4:	f001 fa64 	bl	80018c0 <__errno>
 80003f8:	4603      	mov	r3, r0
 80003fa:	220c      	movs	r2, #12
 80003fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80003fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000402:	e009      	b.n	8000418 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000404:	4b08      	ldr	r3, [pc, #32]	@ (8000428 <_sbrk+0x64>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800040a:	4b07      	ldr	r3, [pc, #28]	@ (8000428 <_sbrk+0x64>)
 800040c:	681a      	ldr	r2, [r3, #0]
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	4413      	add	r3, r2
 8000412:	4a05      	ldr	r2, [pc, #20]	@ (8000428 <_sbrk+0x64>)
 8000414:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000416:	68fb      	ldr	r3, [r7, #12]
}
 8000418:	4618      	mov	r0, r3
 800041a:	3718      	adds	r7, #24
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	20005000 	.word	0x20005000
 8000424:	00000400 	.word	0x00000400
 8000428:	20000080 	.word	0x20000080
 800042c:	20000260 	.word	0x20000260

08000430 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000434:	bf00      	nop
 8000436:	46bd      	mov	sp, r7
 8000438:	bc80      	pop	{r7}
 800043a:	4770      	bx	lr

0800043c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000440:	4b11      	ldr	r3, [pc, #68]	@ (8000488 <MX_USART2_UART_Init+0x4c>)
 8000442:	4a12      	ldr	r2, [pc, #72]	@ (800048c <MX_USART2_UART_Init+0x50>)
 8000444:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000446:	4b10      	ldr	r3, [pc, #64]	@ (8000488 <MX_USART2_UART_Init+0x4c>)
 8000448:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800044c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800044e:	4b0e      	ldr	r3, [pc, #56]	@ (8000488 <MX_USART2_UART_Init+0x4c>)
 8000450:	2200      	movs	r2, #0
 8000452:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000454:	4b0c      	ldr	r3, [pc, #48]	@ (8000488 <MX_USART2_UART_Init+0x4c>)
 8000456:	2200      	movs	r2, #0
 8000458:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800045a:	4b0b      	ldr	r3, [pc, #44]	@ (8000488 <MX_USART2_UART_Init+0x4c>)
 800045c:	2200      	movs	r2, #0
 800045e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000460:	4b09      	ldr	r3, [pc, #36]	@ (8000488 <MX_USART2_UART_Init+0x4c>)
 8000462:	220c      	movs	r2, #12
 8000464:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000466:	4b08      	ldr	r3, [pc, #32]	@ (8000488 <MX_USART2_UART_Init+0x4c>)
 8000468:	2200      	movs	r2, #0
 800046a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800046c:	4b06      	ldr	r3, [pc, #24]	@ (8000488 <MX_USART2_UART_Init+0x4c>)
 800046e:	2200      	movs	r2, #0
 8000470:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000472:	4805      	ldr	r0, [pc, #20]	@ (8000488 <MX_USART2_UART_Init+0x4c>)
 8000474:	f000 ffd8 	bl	8001428 <HAL_UART_Init>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d001      	beq.n	8000482 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800047e:	f7ff ff3c 	bl	80002fa <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000482:	bf00      	nop
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	20000084 	.word	0x20000084
 800048c:	40004400 	.word	0x40004400

08000490 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000494:	4b11      	ldr	r3, [pc, #68]	@ (80004dc <MX_USART3_UART_Init+0x4c>)
 8000496:	4a12      	ldr	r2, [pc, #72]	@ (80004e0 <MX_USART3_UART_Init+0x50>)
 8000498:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800049a:	4b10      	ldr	r3, [pc, #64]	@ (80004dc <MX_USART3_UART_Init+0x4c>)
 800049c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80004a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80004a2:	4b0e      	ldr	r3, [pc, #56]	@ (80004dc <MX_USART3_UART_Init+0x4c>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80004a8:	4b0c      	ldr	r3, [pc, #48]	@ (80004dc <MX_USART3_UART_Init+0x4c>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80004ae:	4b0b      	ldr	r3, [pc, #44]	@ (80004dc <MX_USART3_UART_Init+0x4c>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80004b4:	4b09      	ldr	r3, [pc, #36]	@ (80004dc <MX_USART3_UART_Init+0x4c>)
 80004b6:	220c      	movs	r2, #12
 80004b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004ba:	4b08      	ldr	r3, [pc, #32]	@ (80004dc <MX_USART3_UART_Init+0x4c>)
 80004bc:	2200      	movs	r2, #0
 80004be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80004c0:	4b06      	ldr	r3, [pc, #24]	@ (80004dc <MX_USART3_UART_Init+0x4c>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80004c6:	4805      	ldr	r0, [pc, #20]	@ (80004dc <MX_USART3_UART_Init+0x4c>)
 80004c8:	f000 ffae 	bl	8001428 <HAL_UART_Init>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80004d2:	f7ff ff12 	bl	80002fa <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80004d6:	bf00      	nop
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	200000cc 	.word	0x200000cc
 80004e0:	40004800 	.word	0x40004800

080004e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b08a      	sub	sp, #40	@ 0x28
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ec:	f107 0318 	add.w	r3, r7, #24
 80004f0:	2200      	movs	r2, #0
 80004f2:	601a      	str	r2, [r3, #0]
 80004f4:	605a      	str	r2, [r3, #4]
 80004f6:	609a      	str	r2, [r3, #8]
 80004f8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	4a37      	ldr	r2, [pc, #220]	@ (80005dc <HAL_UART_MspInit+0xf8>)
 8000500:	4293      	cmp	r3, r2
 8000502:	d130      	bne.n	8000566 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000504:	4b36      	ldr	r3, [pc, #216]	@ (80005e0 <HAL_UART_MspInit+0xfc>)
 8000506:	69db      	ldr	r3, [r3, #28]
 8000508:	4a35      	ldr	r2, [pc, #212]	@ (80005e0 <HAL_UART_MspInit+0xfc>)
 800050a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800050e:	61d3      	str	r3, [r2, #28]
 8000510:	4b33      	ldr	r3, [pc, #204]	@ (80005e0 <HAL_UART_MspInit+0xfc>)
 8000512:	69db      	ldr	r3, [r3, #28]
 8000514:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000518:	617b      	str	r3, [r7, #20]
 800051a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800051c:	4b30      	ldr	r3, [pc, #192]	@ (80005e0 <HAL_UART_MspInit+0xfc>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	4a2f      	ldr	r2, [pc, #188]	@ (80005e0 <HAL_UART_MspInit+0xfc>)
 8000522:	f043 0304 	orr.w	r3, r3, #4
 8000526:	6193      	str	r3, [r2, #24]
 8000528:	4b2d      	ldr	r3, [pc, #180]	@ (80005e0 <HAL_UART_MspInit+0xfc>)
 800052a:	699b      	ldr	r3, [r3, #24]
 800052c:	f003 0304 	and.w	r3, r3, #4
 8000530:	613b      	str	r3, [r7, #16]
 8000532:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000534:	2304      	movs	r3, #4
 8000536:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000538:	2302      	movs	r3, #2
 800053a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800053c:	2303      	movs	r3, #3
 800053e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000540:	f107 0318 	add.w	r3, r7, #24
 8000544:	4619      	mov	r1, r3
 8000546:	4827      	ldr	r0, [pc, #156]	@ (80005e4 <HAL_UART_MspInit+0x100>)
 8000548:	f000 f9da 	bl	8000900 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800054c:	2308      	movs	r3, #8
 800054e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000550:	2300      	movs	r3, #0
 8000552:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000554:	2300      	movs	r3, #0
 8000556:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000558:	f107 0318 	add.w	r3, r7, #24
 800055c:	4619      	mov	r1, r3
 800055e:	4821      	ldr	r0, [pc, #132]	@ (80005e4 <HAL_UART_MspInit+0x100>)
 8000560:	f000 f9ce 	bl	8000900 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000564:	e036      	b.n	80005d4 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART3)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4a1f      	ldr	r2, [pc, #124]	@ (80005e8 <HAL_UART_MspInit+0x104>)
 800056c:	4293      	cmp	r3, r2
 800056e:	d131      	bne.n	80005d4 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000570:	4b1b      	ldr	r3, [pc, #108]	@ (80005e0 <HAL_UART_MspInit+0xfc>)
 8000572:	69db      	ldr	r3, [r3, #28]
 8000574:	4a1a      	ldr	r2, [pc, #104]	@ (80005e0 <HAL_UART_MspInit+0xfc>)
 8000576:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800057a:	61d3      	str	r3, [r2, #28]
 800057c:	4b18      	ldr	r3, [pc, #96]	@ (80005e0 <HAL_UART_MspInit+0xfc>)
 800057e:	69db      	ldr	r3, [r3, #28]
 8000580:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000584:	60fb      	str	r3, [r7, #12]
 8000586:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000588:	4b15      	ldr	r3, [pc, #84]	@ (80005e0 <HAL_UART_MspInit+0xfc>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	4a14      	ldr	r2, [pc, #80]	@ (80005e0 <HAL_UART_MspInit+0xfc>)
 800058e:	f043 0308 	orr.w	r3, r3, #8
 8000592:	6193      	str	r3, [r2, #24]
 8000594:	4b12      	ldr	r3, [pc, #72]	@ (80005e0 <HAL_UART_MspInit+0xfc>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	f003 0308 	and.w	r3, r3, #8
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a6:	2302      	movs	r3, #2
 80005a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005aa:	2303      	movs	r3, #3
 80005ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ae:	f107 0318 	add.w	r3, r7, #24
 80005b2:	4619      	mov	r1, r3
 80005b4:	480d      	ldr	r0, [pc, #52]	@ (80005ec <HAL_UART_MspInit+0x108>)
 80005b6:	f000 f9a3 	bl	8000900 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80005ba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80005be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005c0:	2300      	movs	r3, #0
 80005c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c4:	2300      	movs	r3, #0
 80005c6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005c8:	f107 0318 	add.w	r3, r7, #24
 80005cc:	4619      	mov	r1, r3
 80005ce:	4807      	ldr	r0, [pc, #28]	@ (80005ec <HAL_UART_MspInit+0x108>)
 80005d0:	f000 f996 	bl	8000900 <HAL_GPIO_Init>
}
 80005d4:	bf00      	nop
 80005d6:	3728      	adds	r7, #40	@ 0x28
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40004400 	.word	0x40004400
 80005e0:	40021000 	.word	0x40021000
 80005e4:	40010800 	.word	0x40010800
 80005e8:	40004800 	.word	0x40004800
 80005ec:	40010c00 	.word	0x40010c00

080005f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005f0:	f7ff ff1e 	bl	8000430 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005f4:	480b      	ldr	r0, [pc, #44]	@ (8000624 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80005f6:	490c      	ldr	r1, [pc, #48]	@ (8000628 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80005f8:	4a0c      	ldr	r2, [pc, #48]	@ (800062c <LoopFillZerobss+0x16>)
  movs r3, #0
 80005fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005fc:	e002      	b.n	8000604 <LoopCopyDataInit>

080005fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000600:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000602:	3304      	adds	r3, #4

08000604 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000604:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000606:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000608:	d3f9      	bcc.n	80005fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800060a:	4a09      	ldr	r2, [pc, #36]	@ (8000630 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800060c:	4c09      	ldr	r4, [pc, #36]	@ (8000634 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800060e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000610:	e001      	b.n	8000616 <LoopFillZerobss>

08000612 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000612:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000614:	3204      	adds	r2, #4

08000616 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000616:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000618:	d3fb      	bcc.n	8000612 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800061a:	f001 f957 	bl	80018cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800061e:	f7ff fe1b 	bl	8000258 <main>
  bx lr
 8000622:	4770      	bx	lr
  ldr r0, =_sdata
 8000624:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000628:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800062c:	08002264 	.word	0x08002264
  ldr r2, =_sbss
 8000630:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000634:	20000260 	.word	0x20000260

08000638 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000638:	e7fe      	b.n	8000638 <ADC1_2_IRQHandler>
	...

0800063c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000640:	4b08      	ldr	r3, [pc, #32]	@ (8000664 <HAL_Init+0x28>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a07      	ldr	r2, [pc, #28]	@ (8000664 <HAL_Init+0x28>)
 8000646:	f043 0310 	orr.w	r3, r3, #16
 800064a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800064c:	2003      	movs	r0, #3
 800064e:	f000 f907 	bl	8000860 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000652:	200f      	movs	r0, #15
 8000654:	f000 f808 	bl	8000668 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000658:	f7ff fe56 	bl	8000308 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800065c:	2300      	movs	r3, #0
}
 800065e:	4618      	mov	r0, r3
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40022000 	.word	0x40022000

08000668 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000670:	4b12      	ldr	r3, [pc, #72]	@ (80006bc <HAL_InitTick+0x54>)
 8000672:	681a      	ldr	r2, [r3, #0]
 8000674:	4b12      	ldr	r3, [pc, #72]	@ (80006c0 <HAL_InitTick+0x58>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	4619      	mov	r1, r3
 800067a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800067e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000682:	fbb2 f3f3 	udiv	r3, r2, r3
 8000686:	4618      	mov	r0, r3
 8000688:	f000 f911 	bl	80008ae <HAL_SYSTICK_Config>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000692:	2301      	movs	r3, #1
 8000694:	e00e      	b.n	80006b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	2b0f      	cmp	r3, #15
 800069a:	d80a      	bhi.n	80006b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800069c:	2200      	movs	r2, #0
 800069e:	6879      	ldr	r1, [r7, #4]
 80006a0:	f04f 30ff 	mov.w	r0, #4294967295
 80006a4:	f000 f8e7 	bl	8000876 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006a8:	4a06      	ldr	r2, [pc, #24]	@ (80006c4 <HAL_InitTick+0x5c>)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006ae:	2300      	movs	r3, #0
 80006b0:	e000      	b.n	80006b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006b2:	2301      	movs	r3, #1
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20000000 	.word	0x20000000
 80006c0:	20000008 	.word	0x20000008
 80006c4:	20000004 	.word	0x20000004

080006c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006cc:	4b05      	ldr	r3, [pc, #20]	@ (80006e4 <HAL_IncTick+0x1c>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	461a      	mov	r2, r3
 80006d2:	4b05      	ldr	r3, [pc, #20]	@ (80006e8 <HAL_IncTick+0x20>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4413      	add	r3, r2
 80006d8:	4a03      	ldr	r2, [pc, #12]	@ (80006e8 <HAL_IncTick+0x20>)
 80006da:	6013      	str	r3, [r2, #0]
}
 80006dc:	bf00      	nop
 80006de:	46bd      	mov	sp, r7
 80006e0:	bc80      	pop	{r7}
 80006e2:	4770      	bx	lr
 80006e4:	20000008 	.word	0x20000008
 80006e8:	20000114 	.word	0x20000114

080006ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  return uwTick;
 80006f0:	4b02      	ldr	r3, [pc, #8]	@ (80006fc <HAL_GetTick+0x10>)
 80006f2:	681b      	ldr	r3, [r3, #0]
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bc80      	pop	{r7}
 80006fa:	4770      	bx	lr
 80006fc:	20000114 	.word	0x20000114

08000700 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000700:	b480      	push	{r7}
 8000702:	b085      	sub	sp, #20
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	f003 0307 	and.w	r3, r3, #7
 800070e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000710:	4b0c      	ldr	r3, [pc, #48]	@ (8000744 <__NVIC_SetPriorityGrouping+0x44>)
 8000712:	68db      	ldr	r3, [r3, #12]
 8000714:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000716:	68ba      	ldr	r2, [r7, #8]
 8000718:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800071c:	4013      	ands	r3, r2
 800071e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000728:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800072c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000730:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000732:	4a04      	ldr	r2, [pc, #16]	@ (8000744 <__NVIC_SetPriorityGrouping+0x44>)
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	60d3      	str	r3, [r2, #12]
}
 8000738:	bf00      	nop
 800073a:	3714      	adds	r7, #20
 800073c:	46bd      	mov	sp, r7
 800073e:	bc80      	pop	{r7}
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	e000ed00 	.word	0xe000ed00

08000748 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800074c:	4b04      	ldr	r3, [pc, #16]	@ (8000760 <__NVIC_GetPriorityGrouping+0x18>)
 800074e:	68db      	ldr	r3, [r3, #12]
 8000750:	0a1b      	lsrs	r3, r3, #8
 8000752:	f003 0307 	and.w	r3, r3, #7
}
 8000756:	4618      	mov	r0, r3
 8000758:	46bd      	mov	sp, r7
 800075a:	bc80      	pop	{r7}
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	e000ed00 	.word	0xe000ed00

08000764 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	6039      	str	r1, [r7, #0]
 800076e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000774:	2b00      	cmp	r3, #0
 8000776:	db0a      	blt.n	800078e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	b2da      	uxtb	r2, r3
 800077c:	490c      	ldr	r1, [pc, #48]	@ (80007b0 <__NVIC_SetPriority+0x4c>)
 800077e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000782:	0112      	lsls	r2, r2, #4
 8000784:	b2d2      	uxtb	r2, r2
 8000786:	440b      	add	r3, r1
 8000788:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800078c:	e00a      	b.n	80007a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	b2da      	uxtb	r2, r3
 8000792:	4908      	ldr	r1, [pc, #32]	@ (80007b4 <__NVIC_SetPriority+0x50>)
 8000794:	79fb      	ldrb	r3, [r7, #7]
 8000796:	f003 030f 	and.w	r3, r3, #15
 800079a:	3b04      	subs	r3, #4
 800079c:	0112      	lsls	r2, r2, #4
 800079e:	b2d2      	uxtb	r2, r2
 80007a0:	440b      	add	r3, r1
 80007a2:	761a      	strb	r2, [r3, #24]
}
 80007a4:	bf00      	nop
 80007a6:	370c      	adds	r7, #12
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bc80      	pop	{r7}
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	e000e100 	.word	0xe000e100
 80007b4:	e000ed00 	.word	0xe000ed00

080007b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b089      	sub	sp, #36	@ 0x24
 80007bc:	af00      	add	r7, sp, #0
 80007be:	60f8      	str	r0, [r7, #12]
 80007c0:	60b9      	str	r1, [r7, #8]
 80007c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	f003 0307 	and.w	r3, r3, #7
 80007ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007cc:	69fb      	ldr	r3, [r7, #28]
 80007ce:	f1c3 0307 	rsb	r3, r3, #7
 80007d2:	2b04      	cmp	r3, #4
 80007d4:	bf28      	it	cs
 80007d6:	2304      	movcs	r3, #4
 80007d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007da:	69fb      	ldr	r3, [r7, #28]
 80007dc:	3304      	adds	r3, #4
 80007de:	2b06      	cmp	r3, #6
 80007e0:	d902      	bls.n	80007e8 <NVIC_EncodePriority+0x30>
 80007e2:	69fb      	ldr	r3, [r7, #28]
 80007e4:	3b03      	subs	r3, #3
 80007e6:	e000      	b.n	80007ea <NVIC_EncodePriority+0x32>
 80007e8:	2300      	movs	r3, #0
 80007ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007ec:	f04f 32ff 	mov.w	r2, #4294967295
 80007f0:	69bb      	ldr	r3, [r7, #24]
 80007f2:	fa02 f303 	lsl.w	r3, r2, r3
 80007f6:	43da      	mvns	r2, r3
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	401a      	ands	r2, r3
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000800:	f04f 31ff 	mov.w	r1, #4294967295
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	fa01 f303 	lsl.w	r3, r1, r3
 800080a:	43d9      	mvns	r1, r3
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000810:	4313      	orrs	r3, r2
         );
}
 8000812:	4618      	mov	r0, r3
 8000814:	3724      	adds	r7, #36	@ 0x24
 8000816:	46bd      	mov	sp, r7
 8000818:	bc80      	pop	{r7}
 800081a:	4770      	bx	lr

0800081c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	3b01      	subs	r3, #1
 8000828:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800082c:	d301      	bcc.n	8000832 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800082e:	2301      	movs	r3, #1
 8000830:	e00f      	b.n	8000852 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000832:	4a0a      	ldr	r2, [pc, #40]	@ (800085c <SysTick_Config+0x40>)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	3b01      	subs	r3, #1
 8000838:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800083a:	210f      	movs	r1, #15
 800083c:	f04f 30ff 	mov.w	r0, #4294967295
 8000840:	f7ff ff90 	bl	8000764 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000844:	4b05      	ldr	r3, [pc, #20]	@ (800085c <SysTick_Config+0x40>)
 8000846:	2200      	movs	r2, #0
 8000848:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800084a:	4b04      	ldr	r3, [pc, #16]	@ (800085c <SysTick_Config+0x40>)
 800084c:	2207      	movs	r2, #7
 800084e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000850:	2300      	movs	r3, #0
}
 8000852:	4618      	mov	r0, r3
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	e000e010 	.word	0xe000e010

08000860 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000868:	6878      	ldr	r0, [r7, #4]
 800086a:	f7ff ff49 	bl	8000700 <__NVIC_SetPriorityGrouping>
}
 800086e:	bf00      	nop
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}

08000876 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000876:	b580      	push	{r7, lr}
 8000878:	b086      	sub	sp, #24
 800087a:	af00      	add	r7, sp, #0
 800087c:	4603      	mov	r3, r0
 800087e:	60b9      	str	r1, [r7, #8]
 8000880:	607a      	str	r2, [r7, #4]
 8000882:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000884:	2300      	movs	r3, #0
 8000886:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000888:	f7ff ff5e 	bl	8000748 <__NVIC_GetPriorityGrouping>
 800088c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800088e:	687a      	ldr	r2, [r7, #4]
 8000890:	68b9      	ldr	r1, [r7, #8]
 8000892:	6978      	ldr	r0, [r7, #20]
 8000894:	f7ff ff90 	bl	80007b8 <NVIC_EncodePriority>
 8000898:	4602      	mov	r2, r0
 800089a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800089e:	4611      	mov	r1, r2
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff ff5f 	bl	8000764 <__NVIC_SetPriority>
}
 80008a6:	bf00      	nop
 80008a8:	3718      	adds	r7, #24
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}

080008ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008ae:	b580      	push	{r7, lr}
 80008b0:	b082      	sub	sp, #8
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f7ff ffb0 	bl	800081c <SysTick_Config>
 80008bc:	4603      	mov	r3, r0
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b082      	sub	sp, #8
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d101      	bne.n	80008d8 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80008d4:	2301      	movs	r3, #1
 80008d6:	e00e      	b.n	80008f6 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	795b      	ldrb	r3, [r3, #5]
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d105      	bne.n	80008ee <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	2200      	movs	r2, #0
 80008e6:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80008e8:	6878      	ldr	r0, [r7, #4]
 80008ea:	f7ff fc69 	bl	80001c0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2201      	movs	r2, #1
 80008f2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80008f4:	2300      	movs	r3, #0
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
	...

08000900 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000900:	b480      	push	{r7}
 8000902:	b08b      	sub	sp, #44	@ 0x2c
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800090e:	2300      	movs	r3, #0
 8000910:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000912:	e169      	b.n	8000be8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000914:	2201      	movs	r2, #1
 8000916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000918:	fa02 f303 	lsl.w	r3, r2, r3
 800091c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	69fa      	ldr	r2, [r7, #28]
 8000924:	4013      	ands	r3, r2
 8000926:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000928:	69ba      	ldr	r2, [r7, #24]
 800092a:	69fb      	ldr	r3, [r7, #28]
 800092c:	429a      	cmp	r2, r3
 800092e:	f040 8158 	bne.w	8000be2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	4a9a      	ldr	r2, [pc, #616]	@ (8000ba0 <HAL_GPIO_Init+0x2a0>)
 8000938:	4293      	cmp	r3, r2
 800093a:	d05e      	beq.n	80009fa <HAL_GPIO_Init+0xfa>
 800093c:	4a98      	ldr	r2, [pc, #608]	@ (8000ba0 <HAL_GPIO_Init+0x2a0>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d875      	bhi.n	8000a2e <HAL_GPIO_Init+0x12e>
 8000942:	4a98      	ldr	r2, [pc, #608]	@ (8000ba4 <HAL_GPIO_Init+0x2a4>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d058      	beq.n	80009fa <HAL_GPIO_Init+0xfa>
 8000948:	4a96      	ldr	r2, [pc, #600]	@ (8000ba4 <HAL_GPIO_Init+0x2a4>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d86f      	bhi.n	8000a2e <HAL_GPIO_Init+0x12e>
 800094e:	4a96      	ldr	r2, [pc, #600]	@ (8000ba8 <HAL_GPIO_Init+0x2a8>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d052      	beq.n	80009fa <HAL_GPIO_Init+0xfa>
 8000954:	4a94      	ldr	r2, [pc, #592]	@ (8000ba8 <HAL_GPIO_Init+0x2a8>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d869      	bhi.n	8000a2e <HAL_GPIO_Init+0x12e>
 800095a:	4a94      	ldr	r2, [pc, #592]	@ (8000bac <HAL_GPIO_Init+0x2ac>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d04c      	beq.n	80009fa <HAL_GPIO_Init+0xfa>
 8000960:	4a92      	ldr	r2, [pc, #584]	@ (8000bac <HAL_GPIO_Init+0x2ac>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d863      	bhi.n	8000a2e <HAL_GPIO_Init+0x12e>
 8000966:	4a92      	ldr	r2, [pc, #584]	@ (8000bb0 <HAL_GPIO_Init+0x2b0>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d046      	beq.n	80009fa <HAL_GPIO_Init+0xfa>
 800096c:	4a90      	ldr	r2, [pc, #576]	@ (8000bb0 <HAL_GPIO_Init+0x2b0>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d85d      	bhi.n	8000a2e <HAL_GPIO_Init+0x12e>
 8000972:	2b12      	cmp	r3, #18
 8000974:	d82a      	bhi.n	80009cc <HAL_GPIO_Init+0xcc>
 8000976:	2b12      	cmp	r3, #18
 8000978:	d859      	bhi.n	8000a2e <HAL_GPIO_Init+0x12e>
 800097a:	a201      	add	r2, pc, #4	@ (adr r2, 8000980 <HAL_GPIO_Init+0x80>)
 800097c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000980:	080009fb 	.word	0x080009fb
 8000984:	080009d5 	.word	0x080009d5
 8000988:	080009e7 	.word	0x080009e7
 800098c:	08000a29 	.word	0x08000a29
 8000990:	08000a2f 	.word	0x08000a2f
 8000994:	08000a2f 	.word	0x08000a2f
 8000998:	08000a2f 	.word	0x08000a2f
 800099c:	08000a2f 	.word	0x08000a2f
 80009a0:	08000a2f 	.word	0x08000a2f
 80009a4:	08000a2f 	.word	0x08000a2f
 80009a8:	08000a2f 	.word	0x08000a2f
 80009ac:	08000a2f 	.word	0x08000a2f
 80009b0:	08000a2f 	.word	0x08000a2f
 80009b4:	08000a2f 	.word	0x08000a2f
 80009b8:	08000a2f 	.word	0x08000a2f
 80009bc:	08000a2f 	.word	0x08000a2f
 80009c0:	08000a2f 	.word	0x08000a2f
 80009c4:	080009dd 	.word	0x080009dd
 80009c8:	080009f1 	.word	0x080009f1
 80009cc:	4a79      	ldr	r2, [pc, #484]	@ (8000bb4 <HAL_GPIO_Init+0x2b4>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d013      	beq.n	80009fa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80009d2:	e02c      	b.n	8000a2e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	68db      	ldr	r3, [r3, #12]
 80009d8:	623b      	str	r3, [r7, #32]
          break;
 80009da:	e029      	b.n	8000a30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	68db      	ldr	r3, [r3, #12]
 80009e0:	3304      	adds	r3, #4
 80009e2:	623b      	str	r3, [r7, #32]
          break;
 80009e4:	e024      	b.n	8000a30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	68db      	ldr	r3, [r3, #12]
 80009ea:	3308      	adds	r3, #8
 80009ec:	623b      	str	r3, [r7, #32]
          break;
 80009ee:	e01f      	b.n	8000a30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	68db      	ldr	r3, [r3, #12]
 80009f4:	330c      	adds	r3, #12
 80009f6:	623b      	str	r3, [r7, #32]
          break;
 80009f8:	e01a      	b.n	8000a30 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	689b      	ldr	r3, [r3, #8]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d102      	bne.n	8000a08 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a02:	2304      	movs	r3, #4
 8000a04:	623b      	str	r3, [r7, #32]
          break;
 8000a06:	e013      	b.n	8000a30 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	689b      	ldr	r3, [r3, #8]
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d105      	bne.n	8000a1c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a10:	2308      	movs	r3, #8
 8000a12:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	69fa      	ldr	r2, [r7, #28]
 8000a18:	611a      	str	r2, [r3, #16]
          break;
 8000a1a:	e009      	b.n	8000a30 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a1c:	2308      	movs	r3, #8
 8000a1e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	69fa      	ldr	r2, [r7, #28]
 8000a24:	615a      	str	r2, [r3, #20]
          break;
 8000a26:	e003      	b.n	8000a30 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	623b      	str	r3, [r7, #32]
          break;
 8000a2c:	e000      	b.n	8000a30 <HAL_GPIO_Init+0x130>
          break;
 8000a2e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a30:	69bb      	ldr	r3, [r7, #24]
 8000a32:	2bff      	cmp	r3, #255	@ 0xff
 8000a34:	d801      	bhi.n	8000a3a <HAL_GPIO_Init+0x13a>
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	e001      	b.n	8000a3e <HAL_GPIO_Init+0x13e>
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	3304      	adds	r3, #4
 8000a3e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a40:	69bb      	ldr	r3, [r7, #24]
 8000a42:	2bff      	cmp	r3, #255	@ 0xff
 8000a44:	d802      	bhi.n	8000a4c <HAL_GPIO_Init+0x14c>
 8000a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a48:	009b      	lsls	r3, r3, #2
 8000a4a:	e002      	b.n	8000a52 <HAL_GPIO_Init+0x152>
 8000a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a4e:	3b08      	subs	r3, #8
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	210f      	movs	r1, #15
 8000a5a:	693b      	ldr	r3, [r7, #16]
 8000a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a60:	43db      	mvns	r3, r3
 8000a62:	401a      	ands	r2, r3
 8000a64:	6a39      	ldr	r1, [r7, #32]
 8000a66:	693b      	ldr	r3, [r7, #16]
 8000a68:	fa01 f303 	lsl.w	r3, r1, r3
 8000a6c:	431a      	orrs	r2, r3
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	f000 80b1 	beq.w	8000be2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a80:	4b4d      	ldr	r3, [pc, #308]	@ (8000bb8 <HAL_GPIO_Init+0x2b8>)
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	4a4c      	ldr	r2, [pc, #304]	@ (8000bb8 <HAL_GPIO_Init+0x2b8>)
 8000a86:	f043 0301 	orr.w	r3, r3, #1
 8000a8a:	6193      	str	r3, [r2, #24]
 8000a8c:	4b4a      	ldr	r3, [pc, #296]	@ (8000bb8 <HAL_GPIO_Init+0x2b8>)
 8000a8e:	699b      	ldr	r3, [r3, #24]
 8000a90:	f003 0301 	and.w	r3, r3, #1
 8000a94:	60bb      	str	r3, [r7, #8]
 8000a96:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a98:	4a48      	ldr	r2, [pc, #288]	@ (8000bbc <HAL_GPIO_Init+0x2bc>)
 8000a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a9c:	089b      	lsrs	r3, r3, #2
 8000a9e:	3302      	adds	r3, #2
 8000aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aa4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aa8:	f003 0303 	and.w	r3, r3, #3
 8000aac:	009b      	lsls	r3, r3, #2
 8000aae:	220f      	movs	r2, #15
 8000ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab4:	43db      	mvns	r3, r3
 8000ab6:	68fa      	ldr	r2, [r7, #12]
 8000ab8:	4013      	ands	r3, r2
 8000aba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	4a40      	ldr	r2, [pc, #256]	@ (8000bc0 <HAL_GPIO_Init+0x2c0>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d013      	beq.n	8000aec <HAL_GPIO_Init+0x1ec>
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	4a3f      	ldr	r2, [pc, #252]	@ (8000bc4 <HAL_GPIO_Init+0x2c4>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d00d      	beq.n	8000ae8 <HAL_GPIO_Init+0x1e8>
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4a3e      	ldr	r2, [pc, #248]	@ (8000bc8 <HAL_GPIO_Init+0x2c8>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d007      	beq.n	8000ae4 <HAL_GPIO_Init+0x1e4>
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	4a3d      	ldr	r2, [pc, #244]	@ (8000bcc <HAL_GPIO_Init+0x2cc>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d101      	bne.n	8000ae0 <HAL_GPIO_Init+0x1e0>
 8000adc:	2303      	movs	r3, #3
 8000ade:	e006      	b.n	8000aee <HAL_GPIO_Init+0x1ee>
 8000ae0:	2304      	movs	r3, #4
 8000ae2:	e004      	b.n	8000aee <HAL_GPIO_Init+0x1ee>
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	e002      	b.n	8000aee <HAL_GPIO_Init+0x1ee>
 8000ae8:	2301      	movs	r3, #1
 8000aea:	e000      	b.n	8000aee <HAL_GPIO_Init+0x1ee>
 8000aec:	2300      	movs	r3, #0
 8000aee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000af0:	f002 0203 	and.w	r2, r2, #3
 8000af4:	0092      	lsls	r2, r2, #2
 8000af6:	4093      	lsls	r3, r2
 8000af8:	68fa      	ldr	r2, [r7, #12]
 8000afa:	4313      	orrs	r3, r2
 8000afc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000afe:	492f      	ldr	r1, [pc, #188]	@ (8000bbc <HAL_GPIO_Init+0x2bc>)
 8000b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b02:	089b      	lsrs	r3, r3, #2
 8000b04:	3302      	adds	r3, #2
 8000b06:	68fa      	ldr	r2, [r7, #12]
 8000b08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d006      	beq.n	8000b26 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b18:	4b2d      	ldr	r3, [pc, #180]	@ (8000bd0 <HAL_GPIO_Init+0x2d0>)
 8000b1a:	689a      	ldr	r2, [r3, #8]
 8000b1c:	492c      	ldr	r1, [pc, #176]	@ (8000bd0 <HAL_GPIO_Init+0x2d0>)
 8000b1e:	69bb      	ldr	r3, [r7, #24]
 8000b20:	4313      	orrs	r3, r2
 8000b22:	608b      	str	r3, [r1, #8]
 8000b24:	e006      	b.n	8000b34 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b26:	4b2a      	ldr	r3, [pc, #168]	@ (8000bd0 <HAL_GPIO_Init+0x2d0>)
 8000b28:	689a      	ldr	r2, [r3, #8]
 8000b2a:	69bb      	ldr	r3, [r7, #24]
 8000b2c:	43db      	mvns	r3, r3
 8000b2e:	4928      	ldr	r1, [pc, #160]	@ (8000bd0 <HAL_GPIO_Init+0x2d0>)
 8000b30:	4013      	ands	r3, r2
 8000b32:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d006      	beq.n	8000b4e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b40:	4b23      	ldr	r3, [pc, #140]	@ (8000bd0 <HAL_GPIO_Init+0x2d0>)
 8000b42:	68da      	ldr	r2, [r3, #12]
 8000b44:	4922      	ldr	r1, [pc, #136]	@ (8000bd0 <HAL_GPIO_Init+0x2d0>)
 8000b46:	69bb      	ldr	r3, [r7, #24]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	60cb      	str	r3, [r1, #12]
 8000b4c:	e006      	b.n	8000b5c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b4e:	4b20      	ldr	r3, [pc, #128]	@ (8000bd0 <HAL_GPIO_Init+0x2d0>)
 8000b50:	68da      	ldr	r2, [r3, #12]
 8000b52:	69bb      	ldr	r3, [r7, #24]
 8000b54:	43db      	mvns	r3, r3
 8000b56:	491e      	ldr	r1, [pc, #120]	@ (8000bd0 <HAL_GPIO_Init+0x2d0>)
 8000b58:	4013      	ands	r3, r2
 8000b5a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d006      	beq.n	8000b76 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b68:	4b19      	ldr	r3, [pc, #100]	@ (8000bd0 <HAL_GPIO_Init+0x2d0>)
 8000b6a:	685a      	ldr	r2, [r3, #4]
 8000b6c:	4918      	ldr	r1, [pc, #96]	@ (8000bd0 <HAL_GPIO_Init+0x2d0>)
 8000b6e:	69bb      	ldr	r3, [r7, #24]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	604b      	str	r3, [r1, #4]
 8000b74:	e006      	b.n	8000b84 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b76:	4b16      	ldr	r3, [pc, #88]	@ (8000bd0 <HAL_GPIO_Init+0x2d0>)
 8000b78:	685a      	ldr	r2, [r3, #4]
 8000b7a:	69bb      	ldr	r3, [r7, #24]
 8000b7c:	43db      	mvns	r3, r3
 8000b7e:	4914      	ldr	r1, [pc, #80]	@ (8000bd0 <HAL_GPIO_Init+0x2d0>)
 8000b80:	4013      	ands	r3, r2
 8000b82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d021      	beq.n	8000bd4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b90:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd0 <HAL_GPIO_Init+0x2d0>)
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	490e      	ldr	r1, [pc, #56]	@ (8000bd0 <HAL_GPIO_Init+0x2d0>)
 8000b96:	69bb      	ldr	r3, [r7, #24]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	600b      	str	r3, [r1, #0]
 8000b9c:	e021      	b.n	8000be2 <HAL_GPIO_Init+0x2e2>
 8000b9e:	bf00      	nop
 8000ba0:	10320000 	.word	0x10320000
 8000ba4:	10310000 	.word	0x10310000
 8000ba8:	10220000 	.word	0x10220000
 8000bac:	10210000 	.word	0x10210000
 8000bb0:	10120000 	.word	0x10120000
 8000bb4:	10110000 	.word	0x10110000
 8000bb8:	40021000 	.word	0x40021000
 8000bbc:	40010000 	.word	0x40010000
 8000bc0:	40010800 	.word	0x40010800
 8000bc4:	40010c00 	.word	0x40010c00
 8000bc8:	40011000 	.word	0x40011000
 8000bcc:	40011400 	.word	0x40011400
 8000bd0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8000c04 <HAL_GPIO_Init+0x304>)
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	69bb      	ldr	r3, [r7, #24]
 8000bda:	43db      	mvns	r3, r3
 8000bdc:	4909      	ldr	r1, [pc, #36]	@ (8000c04 <HAL_GPIO_Init+0x304>)
 8000bde:	4013      	ands	r3, r2
 8000be0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000be4:	3301      	adds	r3, #1
 8000be6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bee:	fa22 f303 	lsr.w	r3, r2, r3
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f47f ae8e 	bne.w	8000914 <HAL_GPIO_Init+0x14>
  }
}
 8000bf8:	bf00      	nop
 8000bfa:	bf00      	nop
 8000bfc:	372c      	adds	r7, #44	@ 0x2c
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bc80      	pop	{r7}
 8000c02:	4770      	bx	lr
 8000c04:	40010400 	.word	0x40010400

08000c08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d101      	bne.n	8000c1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
 8000c18:	e272      	b.n	8001100 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f000 8087 	beq.w	8000d36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c28:	4b92      	ldr	r3, [pc, #584]	@ (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	f003 030c 	and.w	r3, r3, #12
 8000c30:	2b04      	cmp	r3, #4
 8000c32:	d00c      	beq.n	8000c4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c34:	4b8f      	ldr	r3, [pc, #572]	@ (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	f003 030c 	and.w	r3, r3, #12
 8000c3c:	2b08      	cmp	r3, #8
 8000c3e:	d112      	bne.n	8000c66 <HAL_RCC_OscConfig+0x5e>
 8000c40:	4b8c      	ldr	r3, [pc, #560]	@ (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000c4c:	d10b      	bne.n	8000c66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c4e:	4b89      	ldr	r3, [pc, #548]	@ (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d06c      	beq.n	8000d34 <HAL_RCC_OscConfig+0x12c>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d168      	bne.n	8000d34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	e24c      	b.n	8001100 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000c6e:	d106      	bne.n	8000c7e <HAL_RCC_OscConfig+0x76>
 8000c70:	4b80      	ldr	r3, [pc, #512]	@ (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a7f      	ldr	r2, [pc, #508]	@ (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000c76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c7a:	6013      	str	r3, [r2, #0]
 8000c7c:	e02e      	b.n	8000cdc <HAL_RCC_OscConfig+0xd4>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d10c      	bne.n	8000ca0 <HAL_RCC_OscConfig+0x98>
 8000c86:	4b7b      	ldr	r3, [pc, #492]	@ (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a7a      	ldr	r2, [pc, #488]	@ (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000c8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000c90:	6013      	str	r3, [r2, #0]
 8000c92:	4b78      	ldr	r3, [pc, #480]	@ (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a77      	ldr	r2, [pc, #476]	@ (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000c98:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c9c:	6013      	str	r3, [r2, #0]
 8000c9e:	e01d      	b.n	8000cdc <HAL_RCC_OscConfig+0xd4>
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000ca8:	d10c      	bne.n	8000cc4 <HAL_RCC_OscConfig+0xbc>
 8000caa:	4b72      	ldr	r3, [pc, #456]	@ (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a71      	ldr	r2, [pc, #452]	@ (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000cb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000cb4:	6013      	str	r3, [r2, #0]
 8000cb6:	4b6f      	ldr	r3, [pc, #444]	@ (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a6e      	ldr	r2, [pc, #440]	@ (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000cbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000cc0:	6013      	str	r3, [r2, #0]
 8000cc2:	e00b      	b.n	8000cdc <HAL_RCC_OscConfig+0xd4>
 8000cc4:	4b6b      	ldr	r3, [pc, #428]	@ (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a6a      	ldr	r2, [pc, #424]	@ (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000cca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000cce:	6013      	str	r3, [r2, #0]
 8000cd0:	4b68      	ldr	r3, [pc, #416]	@ (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a67      	ldr	r2, [pc, #412]	@ (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000cd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000cda:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d013      	beq.n	8000d0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ce4:	f7ff fd02 	bl	80006ec <HAL_GetTick>
 8000ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cea:	e008      	b.n	8000cfe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cec:	f7ff fcfe 	bl	80006ec <HAL_GetTick>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	693b      	ldr	r3, [r7, #16]
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	2b64      	cmp	r3, #100	@ 0x64
 8000cf8:	d901      	bls.n	8000cfe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	e200      	b.n	8001100 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cfe:	4b5d      	ldr	r3, [pc, #372]	@ (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d0f0      	beq.n	8000cec <HAL_RCC_OscConfig+0xe4>
 8000d0a:	e014      	b.n	8000d36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d0c:	f7ff fcee 	bl	80006ec <HAL_GetTick>
 8000d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d12:	e008      	b.n	8000d26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d14:	f7ff fcea 	bl	80006ec <HAL_GetTick>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	2b64      	cmp	r3, #100	@ 0x64
 8000d20:	d901      	bls.n	8000d26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000d22:	2303      	movs	r3, #3
 8000d24:	e1ec      	b.n	8001100 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d26:	4b53      	ldr	r3, [pc, #332]	@ (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d1f0      	bne.n	8000d14 <HAL_RCC_OscConfig+0x10c>
 8000d32:	e000      	b.n	8000d36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f003 0302 	and.w	r3, r3, #2
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d063      	beq.n	8000e0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d42:	4b4c      	ldr	r3, [pc, #304]	@ (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	f003 030c 	and.w	r3, r3, #12
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d00b      	beq.n	8000d66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d4e:	4b49      	ldr	r3, [pc, #292]	@ (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	f003 030c 	and.w	r3, r3, #12
 8000d56:	2b08      	cmp	r3, #8
 8000d58:	d11c      	bne.n	8000d94 <HAL_RCC_OscConfig+0x18c>
 8000d5a:	4b46      	ldr	r3, [pc, #280]	@ (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d116      	bne.n	8000d94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d66:	4b43      	ldr	r3, [pc, #268]	@ (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f003 0302 	and.w	r3, r3, #2
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d005      	beq.n	8000d7e <HAL_RCC_OscConfig+0x176>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	691b      	ldr	r3, [r3, #16]
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d001      	beq.n	8000d7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e1c0      	b.n	8001100 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d7e:	4b3d      	ldr	r3, [pc, #244]	@ (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	695b      	ldr	r3, [r3, #20]
 8000d8a:	00db      	lsls	r3, r3, #3
 8000d8c:	4939      	ldr	r1, [pc, #228]	@ (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d92:	e03a      	b.n	8000e0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	691b      	ldr	r3, [r3, #16]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d020      	beq.n	8000dde <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d9c:	4b36      	ldr	r3, [pc, #216]	@ (8000e78 <HAL_RCC_OscConfig+0x270>)
 8000d9e:	2201      	movs	r2, #1
 8000da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000da2:	f7ff fca3 	bl	80006ec <HAL_GetTick>
 8000da6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000da8:	e008      	b.n	8000dbc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000daa:	f7ff fc9f 	bl	80006ec <HAL_GetTick>
 8000dae:	4602      	mov	r2, r0
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	1ad3      	subs	r3, r2, r3
 8000db4:	2b02      	cmp	r3, #2
 8000db6:	d901      	bls.n	8000dbc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000db8:	2303      	movs	r3, #3
 8000dba:	e1a1      	b.n	8001100 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dbc:	4b2d      	ldr	r3, [pc, #180]	@ (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f003 0302 	and.w	r3, r3, #2
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d0f0      	beq.n	8000daa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dc8:	4b2a      	ldr	r3, [pc, #168]	@ (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	695b      	ldr	r3, [r3, #20]
 8000dd4:	00db      	lsls	r3, r3, #3
 8000dd6:	4927      	ldr	r1, [pc, #156]	@ (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	600b      	str	r3, [r1, #0]
 8000ddc:	e015      	b.n	8000e0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000dde:	4b26      	ldr	r3, [pc, #152]	@ (8000e78 <HAL_RCC_OscConfig+0x270>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000de4:	f7ff fc82 	bl	80006ec <HAL_GetTick>
 8000de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dea:	e008      	b.n	8000dfe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dec:	f7ff fc7e 	bl	80006ec <HAL_GetTick>
 8000df0:	4602      	mov	r2, r0
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	d901      	bls.n	8000dfe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	e180      	b.n	8001100 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dfe:	4b1d      	ldr	r3, [pc, #116]	@ (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f003 0302 	and.w	r3, r3, #2
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d1f0      	bne.n	8000dec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f003 0308 	and.w	r3, r3, #8
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d03a      	beq.n	8000e8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	699b      	ldr	r3, [r3, #24]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d019      	beq.n	8000e52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e1e:	4b17      	ldr	r3, [pc, #92]	@ (8000e7c <HAL_RCC_OscConfig+0x274>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e24:	f7ff fc62 	bl	80006ec <HAL_GetTick>
 8000e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e2a:	e008      	b.n	8000e3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e2c:	f7ff fc5e 	bl	80006ec <HAL_GetTick>
 8000e30:	4602      	mov	r2, r0
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	2b02      	cmp	r3, #2
 8000e38:	d901      	bls.n	8000e3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	e160      	b.n	8001100 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e42:	f003 0302 	and.w	r3, r3, #2
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d0f0      	beq.n	8000e2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000e4a:	2001      	movs	r0, #1
 8000e4c:	f000 face 	bl	80013ec <RCC_Delay>
 8000e50:	e01c      	b.n	8000e8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e52:	4b0a      	ldr	r3, [pc, #40]	@ (8000e7c <HAL_RCC_OscConfig+0x274>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e58:	f7ff fc48 	bl	80006ec <HAL_GetTick>
 8000e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e5e:	e00f      	b.n	8000e80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e60:	f7ff fc44 	bl	80006ec <HAL_GetTick>
 8000e64:	4602      	mov	r2, r0
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	2b02      	cmp	r3, #2
 8000e6c:	d908      	bls.n	8000e80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	e146      	b.n	8001100 <HAL_RCC_OscConfig+0x4f8>
 8000e72:	bf00      	nop
 8000e74:	40021000 	.word	0x40021000
 8000e78:	42420000 	.word	0x42420000
 8000e7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e80:	4b92      	ldr	r3, [pc, #584]	@ (80010cc <HAL_RCC_OscConfig+0x4c4>)
 8000e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e84:	f003 0302 	and.w	r3, r3, #2
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d1e9      	bne.n	8000e60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f003 0304 	and.w	r3, r3, #4
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	f000 80a6 	beq.w	8000fe6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e9e:	4b8b      	ldr	r3, [pc, #556]	@ (80010cc <HAL_RCC_OscConfig+0x4c4>)
 8000ea0:	69db      	ldr	r3, [r3, #28]
 8000ea2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d10d      	bne.n	8000ec6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000eaa:	4b88      	ldr	r3, [pc, #544]	@ (80010cc <HAL_RCC_OscConfig+0x4c4>)
 8000eac:	69db      	ldr	r3, [r3, #28]
 8000eae:	4a87      	ldr	r2, [pc, #540]	@ (80010cc <HAL_RCC_OscConfig+0x4c4>)
 8000eb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000eb4:	61d3      	str	r3, [r2, #28]
 8000eb6:	4b85      	ldr	r3, [pc, #532]	@ (80010cc <HAL_RCC_OscConfig+0x4c4>)
 8000eb8:	69db      	ldr	r3, [r3, #28]
 8000eba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ebe:	60bb      	str	r3, [r7, #8]
 8000ec0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ec6:	4b82      	ldr	r3, [pc, #520]	@ (80010d0 <HAL_RCC_OscConfig+0x4c8>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d118      	bne.n	8000f04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ed2:	4b7f      	ldr	r3, [pc, #508]	@ (80010d0 <HAL_RCC_OscConfig+0x4c8>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a7e      	ldr	r2, [pc, #504]	@ (80010d0 <HAL_RCC_OscConfig+0x4c8>)
 8000ed8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000edc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ede:	f7ff fc05 	bl	80006ec <HAL_GetTick>
 8000ee2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ee4:	e008      	b.n	8000ef8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ee6:	f7ff fc01 	bl	80006ec <HAL_GetTick>
 8000eea:	4602      	mov	r2, r0
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	1ad3      	subs	r3, r2, r3
 8000ef0:	2b64      	cmp	r3, #100	@ 0x64
 8000ef2:	d901      	bls.n	8000ef8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	e103      	b.n	8001100 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ef8:	4b75      	ldr	r3, [pc, #468]	@ (80010d0 <HAL_RCC_OscConfig+0x4c8>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d0f0      	beq.n	8000ee6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d106      	bne.n	8000f1a <HAL_RCC_OscConfig+0x312>
 8000f0c:	4b6f      	ldr	r3, [pc, #444]	@ (80010cc <HAL_RCC_OscConfig+0x4c4>)
 8000f0e:	6a1b      	ldr	r3, [r3, #32]
 8000f10:	4a6e      	ldr	r2, [pc, #440]	@ (80010cc <HAL_RCC_OscConfig+0x4c4>)
 8000f12:	f043 0301 	orr.w	r3, r3, #1
 8000f16:	6213      	str	r3, [r2, #32]
 8000f18:	e02d      	b.n	8000f76 <HAL_RCC_OscConfig+0x36e>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	68db      	ldr	r3, [r3, #12]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d10c      	bne.n	8000f3c <HAL_RCC_OscConfig+0x334>
 8000f22:	4b6a      	ldr	r3, [pc, #424]	@ (80010cc <HAL_RCC_OscConfig+0x4c4>)
 8000f24:	6a1b      	ldr	r3, [r3, #32]
 8000f26:	4a69      	ldr	r2, [pc, #420]	@ (80010cc <HAL_RCC_OscConfig+0x4c4>)
 8000f28:	f023 0301 	bic.w	r3, r3, #1
 8000f2c:	6213      	str	r3, [r2, #32]
 8000f2e:	4b67      	ldr	r3, [pc, #412]	@ (80010cc <HAL_RCC_OscConfig+0x4c4>)
 8000f30:	6a1b      	ldr	r3, [r3, #32]
 8000f32:	4a66      	ldr	r2, [pc, #408]	@ (80010cc <HAL_RCC_OscConfig+0x4c4>)
 8000f34:	f023 0304 	bic.w	r3, r3, #4
 8000f38:	6213      	str	r3, [r2, #32]
 8000f3a:	e01c      	b.n	8000f76 <HAL_RCC_OscConfig+0x36e>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	2b05      	cmp	r3, #5
 8000f42:	d10c      	bne.n	8000f5e <HAL_RCC_OscConfig+0x356>
 8000f44:	4b61      	ldr	r3, [pc, #388]	@ (80010cc <HAL_RCC_OscConfig+0x4c4>)
 8000f46:	6a1b      	ldr	r3, [r3, #32]
 8000f48:	4a60      	ldr	r2, [pc, #384]	@ (80010cc <HAL_RCC_OscConfig+0x4c4>)
 8000f4a:	f043 0304 	orr.w	r3, r3, #4
 8000f4e:	6213      	str	r3, [r2, #32]
 8000f50:	4b5e      	ldr	r3, [pc, #376]	@ (80010cc <HAL_RCC_OscConfig+0x4c4>)
 8000f52:	6a1b      	ldr	r3, [r3, #32]
 8000f54:	4a5d      	ldr	r2, [pc, #372]	@ (80010cc <HAL_RCC_OscConfig+0x4c4>)
 8000f56:	f043 0301 	orr.w	r3, r3, #1
 8000f5a:	6213      	str	r3, [r2, #32]
 8000f5c:	e00b      	b.n	8000f76 <HAL_RCC_OscConfig+0x36e>
 8000f5e:	4b5b      	ldr	r3, [pc, #364]	@ (80010cc <HAL_RCC_OscConfig+0x4c4>)
 8000f60:	6a1b      	ldr	r3, [r3, #32]
 8000f62:	4a5a      	ldr	r2, [pc, #360]	@ (80010cc <HAL_RCC_OscConfig+0x4c4>)
 8000f64:	f023 0301 	bic.w	r3, r3, #1
 8000f68:	6213      	str	r3, [r2, #32]
 8000f6a:	4b58      	ldr	r3, [pc, #352]	@ (80010cc <HAL_RCC_OscConfig+0x4c4>)
 8000f6c:	6a1b      	ldr	r3, [r3, #32]
 8000f6e:	4a57      	ldr	r2, [pc, #348]	@ (80010cc <HAL_RCC_OscConfig+0x4c4>)
 8000f70:	f023 0304 	bic.w	r3, r3, #4
 8000f74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	68db      	ldr	r3, [r3, #12]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d015      	beq.n	8000faa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f7e:	f7ff fbb5 	bl	80006ec <HAL_GetTick>
 8000f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f84:	e00a      	b.n	8000f9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f86:	f7ff fbb1 	bl	80006ec <HAL_GetTick>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	1ad3      	subs	r3, r2, r3
 8000f90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d901      	bls.n	8000f9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	e0b1      	b.n	8001100 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f9c:	4b4b      	ldr	r3, [pc, #300]	@ (80010cc <HAL_RCC_OscConfig+0x4c4>)
 8000f9e:	6a1b      	ldr	r3, [r3, #32]
 8000fa0:	f003 0302 	and.w	r3, r3, #2
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d0ee      	beq.n	8000f86 <HAL_RCC_OscConfig+0x37e>
 8000fa8:	e014      	b.n	8000fd4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000faa:	f7ff fb9f 	bl	80006ec <HAL_GetTick>
 8000fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fb0:	e00a      	b.n	8000fc8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fb2:	f7ff fb9b 	bl	80006ec <HAL_GetTick>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d901      	bls.n	8000fc8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	e09b      	b.n	8001100 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fc8:	4b40      	ldr	r3, [pc, #256]	@ (80010cc <HAL_RCC_OscConfig+0x4c4>)
 8000fca:	6a1b      	ldr	r3, [r3, #32]
 8000fcc:	f003 0302 	and.w	r3, r3, #2
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d1ee      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000fd4:	7dfb      	ldrb	r3, [r7, #23]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d105      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fda:	4b3c      	ldr	r3, [pc, #240]	@ (80010cc <HAL_RCC_OscConfig+0x4c4>)
 8000fdc:	69db      	ldr	r3, [r3, #28]
 8000fde:	4a3b      	ldr	r2, [pc, #236]	@ (80010cc <HAL_RCC_OscConfig+0x4c4>)
 8000fe0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000fe4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	69db      	ldr	r3, [r3, #28]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	f000 8087 	beq.w	80010fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ff0:	4b36      	ldr	r3, [pc, #216]	@ (80010cc <HAL_RCC_OscConfig+0x4c4>)
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f003 030c 	and.w	r3, r3, #12
 8000ff8:	2b08      	cmp	r3, #8
 8000ffa:	d061      	beq.n	80010c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	69db      	ldr	r3, [r3, #28]
 8001000:	2b02      	cmp	r3, #2
 8001002:	d146      	bne.n	8001092 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001004:	4b33      	ldr	r3, [pc, #204]	@ (80010d4 <HAL_RCC_OscConfig+0x4cc>)
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800100a:	f7ff fb6f 	bl	80006ec <HAL_GetTick>
 800100e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001010:	e008      	b.n	8001024 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001012:	f7ff fb6b 	bl	80006ec <HAL_GetTick>
 8001016:	4602      	mov	r2, r0
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	2b02      	cmp	r3, #2
 800101e:	d901      	bls.n	8001024 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001020:	2303      	movs	r3, #3
 8001022:	e06d      	b.n	8001100 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001024:	4b29      	ldr	r3, [pc, #164]	@ (80010cc <HAL_RCC_OscConfig+0x4c4>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800102c:	2b00      	cmp	r3, #0
 800102e:	d1f0      	bne.n	8001012 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6a1b      	ldr	r3, [r3, #32]
 8001034:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001038:	d108      	bne.n	800104c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800103a:	4b24      	ldr	r3, [pc, #144]	@ (80010cc <HAL_RCC_OscConfig+0x4c4>)
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	4921      	ldr	r1, [pc, #132]	@ (80010cc <HAL_RCC_OscConfig+0x4c4>)
 8001048:	4313      	orrs	r3, r2
 800104a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800104c:	4b1f      	ldr	r3, [pc, #124]	@ (80010cc <HAL_RCC_OscConfig+0x4c4>)
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6a19      	ldr	r1, [r3, #32]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800105c:	430b      	orrs	r3, r1
 800105e:	491b      	ldr	r1, [pc, #108]	@ (80010cc <HAL_RCC_OscConfig+0x4c4>)
 8001060:	4313      	orrs	r3, r2
 8001062:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001064:	4b1b      	ldr	r3, [pc, #108]	@ (80010d4 <HAL_RCC_OscConfig+0x4cc>)
 8001066:	2201      	movs	r2, #1
 8001068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800106a:	f7ff fb3f 	bl	80006ec <HAL_GetTick>
 800106e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001070:	e008      	b.n	8001084 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001072:	f7ff fb3b 	bl	80006ec <HAL_GetTick>
 8001076:	4602      	mov	r2, r0
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	2b02      	cmp	r3, #2
 800107e:	d901      	bls.n	8001084 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001080:	2303      	movs	r3, #3
 8001082:	e03d      	b.n	8001100 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001084:	4b11      	ldr	r3, [pc, #68]	@ (80010cc <HAL_RCC_OscConfig+0x4c4>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800108c:	2b00      	cmp	r3, #0
 800108e:	d0f0      	beq.n	8001072 <HAL_RCC_OscConfig+0x46a>
 8001090:	e035      	b.n	80010fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001092:	4b10      	ldr	r3, [pc, #64]	@ (80010d4 <HAL_RCC_OscConfig+0x4cc>)
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001098:	f7ff fb28 	bl	80006ec <HAL_GetTick>
 800109c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800109e:	e008      	b.n	80010b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010a0:	f7ff fb24 	bl	80006ec <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	d901      	bls.n	80010b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80010ae:	2303      	movs	r3, #3
 80010b0:	e026      	b.n	8001100 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010b2:	4b06      	ldr	r3, [pc, #24]	@ (80010cc <HAL_RCC_OscConfig+0x4c4>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d1f0      	bne.n	80010a0 <HAL_RCC_OscConfig+0x498>
 80010be:	e01e      	b.n	80010fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	69db      	ldr	r3, [r3, #28]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d107      	bne.n	80010d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	e019      	b.n	8001100 <HAL_RCC_OscConfig+0x4f8>
 80010cc:	40021000 	.word	0x40021000
 80010d0:	40007000 	.word	0x40007000
 80010d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80010d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001108 <HAL_RCC_OscConfig+0x500>)
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6a1b      	ldr	r3, [r3, #32]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d106      	bne.n	80010fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d001      	beq.n	80010fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e000      	b.n	8001100 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80010fe:	2300      	movs	r3, #0
}
 8001100:	4618      	mov	r0, r3
 8001102:	3718      	adds	r7, #24
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40021000 	.word	0x40021000

0800110c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d101      	bne.n	8001120 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800111c:	2301      	movs	r3, #1
 800111e:	e0d0      	b.n	80012c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001120:	4b6a      	ldr	r3, [pc, #424]	@ (80012cc <HAL_RCC_ClockConfig+0x1c0>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 0307 	and.w	r3, r3, #7
 8001128:	683a      	ldr	r2, [r7, #0]
 800112a:	429a      	cmp	r2, r3
 800112c:	d910      	bls.n	8001150 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800112e:	4b67      	ldr	r3, [pc, #412]	@ (80012cc <HAL_RCC_ClockConfig+0x1c0>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f023 0207 	bic.w	r2, r3, #7
 8001136:	4965      	ldr	r1, [pc, #404]	@ (80012cc <HAL_RCC_ClockConfig+0x1c0>)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	4313      	orrs	r3, r2
 800113c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800113e:	4b63      	ldr	r3, [pc, #396]	@ (80012cc <HAL_RCC_ClockConfig+0x1c0>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	683a      	ldr	r2, [r7, #0]
 8001148:	429a      	cmp	r2, r3
 800114a:	d001      	beq.n	8001150 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	e0b8      	b.n	80012c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 0302 	and.w	r3, r3, #2
 8001158:	2b00      	cmp	r3, #0
 800115a:	d020      	beq.n	800119e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f003 0304 	and.w	r3, r3, #4
 8001164:	2b00      	cmp	r3, #0
 8001166:	d005      	beq.n	8001174 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001168:	4b59      	ldr	r3, [pc, #356]	@ (80012d0 <HAL_RCC_ClockConfig+0x1c4>)
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	4a58      	ldr	r2, [pc, #352]	@ (80012d0 <HAL_RCC_ClockConfig+0x1c4>)
 800116e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001172:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f003 0308 	and.w	r3, r3, #8
 800117c:	2b00      	cmp	r3, #0
 800117e:	d005      	beq.n	800118c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001180:	4b53      	ldr	r3, [pc, #332]	@ (80012d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	4a52      	ldr	r2, [pc, #328]	@ (80012d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001186:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800118a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800118c:	4b50      	ldr	r3, [pc, #320]	@ (80012d0 <HAL_RCC_ClockConfig+0x1c4>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	494d      	ldr	r1, [pc, #308]	@ (80012d0 <HAL_RCC_ClockConfig+0x1c4>)
 800119a:	4313      	orrs	r3, r2
 800119c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d040      	beq.n	800122c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d107      	bne.n	80011c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011b2:	4b47      	ldr	r3, [pc, #284]	@ (80012d0 <HAL_RCC_ClockConfig+0x1c4>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d115      	bne.n	80011ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e07f      	b.n	80012c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d107      	bne.n	80011da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011ca:	4b41      	ldr	r3, [pc, #260]	@ (80012d0 <HAL_RCC_ClockConfig+0x1c4>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d109      	bne.n	80011ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e073      	b.n	80012c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011da:	4b3d      	ldr	r3, [pc, #244]	@ (80012d0 <HAL_RCC_ClockConfig+0x1c4>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d101      	bne.n	80011ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e06b      	b.n	80012c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011ea:	4b39      	ldr	r3, [pc, #228]	@ (80012d0 <HAL_RCC_ClockConfig+0x1c4>)
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f023 0203 	bic.w	r2, r3, #3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	4936      	ldr	r1, [pc, #216]	@ (80012d0 <HAL_RCC_ClockConfig+0x1c4>)
 80011f8:	4313      	orrs	r3, r2
 80011fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011fc:	f7ff fa76 	bl	80006ec <HAL_GetTick>
 8001200:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001202:	e00a      	b.n	800121a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001204:	f7ff fa72 	bl	80006ec <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001212:	4293      	cmp	r3, r2
 8001214:	d901      	bls.n	800121a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001216:	2303      	movs	r3, #3
 8001218:	e053      	b.n	80012c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800121a:	4b2d      	ldr	r3, [pc, #180]	@ (80012d0 <HAL_RCC_ClockConfig+0x1c4>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f003 020c 	and.w	r2, r3, #12
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	429a      	cmp	r2, r3
 800122a:	d1eb      	bne.n	8001204 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800122c:	4b27      	ldr	r3, [pc, #156]	@ (80012cc <HAL_RCC_ClockConfig+0x1c0>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 0307 	and.w	r3, r3, #7
 8001234:	683a      	ldr	r2, [r7, #0]
 8001236:	429a      	cmp	r2, r3
 8001238:	d210      	bcs.n	800125c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800123a:	4b24      	ldr	r3, [pc, #144]	@ (80012cc <HAL_RCC_ClockConfig+0x1c0>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f023 0207 	bic.w	r2, r3, #7
 8001242:	4922      	ldr	r1, [pc, #136]	@ (80012cc <HAL_RCC_ClockConfig+0x1c0>)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	4313      	orrs	r3, r2
 8001248:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800124a:	4b20      	ldr	r3, [pc, #128]	@ (80012cc <HAL_RCC_ClockConfig+0x1c0>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0307 	and.w	r3, r3, #7
 8001252:	683a      	ldr	r2, [r7, #0]
 8001254:	429a      	cmp	r2, r3
 8001256:	d001      	beq.n	800125c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e032      	b.n	80012c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 0304 	and.w	r3, r3, #4
 8001264:	2b00      	cmp	r3, #0
 8001266:	d008      	beq.n	800127a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001268:	4b19      	ldr	r3, [pc, #100]	@ (80012d0 <HAL_RCC_ClockConfig+0x1c4>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	4916      	ldr	r1, [pc, #88]	@ (80012d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001276:	4313      	orrs	r3, r2
 8001278:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0308 	and.w	r3, r3, #8
 8001282:	2b00      	cmp	r3, #0
 8001284:	d009      	beq.n	800129a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001286:	4b12      	ldr	r3, [pc, #72]	@ (80012d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	691b      	ldr	r3, [r3, #16]
 8001292:	00db      	lsls	r3, r3, #3
 8001294:	490e      	ldr	r1, [pc, #56]	@ (80012d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001296:	4313      	orrs	r3, r2
 8001298:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800129a:	f000 f821 	bl	80012e0 <HAL_RCC_GetSysClockFreq>
 800129e:	4602      	mov	r2, r0
 80012a0:	4b0b      	ldr	r3, [pc, #44]	@ (80012d0 <HAL_RCC_ClockConfig+0x1c4>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	091b      	lsrs	r3, r3, #4
 80012a6:	f003 030f 	and.w	r3, r3, #15
 80012aa:	490a      	ldr	r1, [pc, #40]	@ (80012d4 <HAL_RCC_ClockConfig+0x1c8>)
 80012ac:	5ccb      	ldrb	r3, [r1, r3]
 80012ae:	fa22 f303 	lsr.w	r3, r2, r3
 80012b2:	4a09      	ldr	r2, [pc, #36]	@ (80012d8 <HAL_RCC_ClockConfig+0x1cc>)
 80012b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80012b6:	4b09      	ldr	r3, [pc, #36]	@ (80012dc <HAL_RCC_ClockConfig+0x1d0>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff f9d4 	bl	8000668 <HAL_InitTick>

  return HAL_OK;
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40022000 	.word	0x40022000
 80012d0:	40021000 	.word	0x40021000
 80012d4:	080021fc 	.word	0x080021fc
 80012d8:	20000000 	.word	0x20000000
 80012dc:	20000004 	.word	0x20000004

080012e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b087      	sub	sp, #28
 80012e4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	2300      	movs	r3, #0
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	2300      	movs	r3, #0
 80012f0:	617b      	str	r3, [r7, #20]
 80012f2:	2300      	movs	r3, #0
 80012f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80012f6:	2300      	movs	r3, #0
 80012f8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80012fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001374 <HAL_RCC_GetSysClockFreq+0x94>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f003 030c 	and.w	r3, r3, #12
 8001306:	2b04      	cmp	r3, #4
 8001308:	d002      	beq.n	8001310 <HAL_RCC_GetSysClockFreq+0x30>
 800130a:	2b08      	cmp	r3, #8
 800130c:	d003      	beq.n	8001316 <HAL_RCC_GetSysClockFreq+0x36>
 800130e:	e027      	b.n	8001360 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001310:	4b19      	ldr	r3, [pc, #100]	@ (8001378 <HAL_RCC_GetSysClockFreq+0x98>)
 8001312:	613b      	str	r3, [r7, #16]
      break;
 8001314:	e027      	b.n	8001366 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	0c9b      	lsrs	r3, r3, #18
 800131a:	f003 030f 	and.w	r3, r3, #15
 800131e:	4a17      	ldr	r2, [pc, #92]	@ (800137c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001320:	5cd3      	ldrb	r3, [r2, r3]
 8001322:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d010      	beq.n	8001350 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800132e:	4b11      	ldr	r3, [pc, #68]	@ (8001374 <HAL_RCC_GetSysClockFreq+0x94>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	0c5b      	lsrs	r3, r3, #17
 8001334:	f003 0301 	and.w	r3, r3, #1
 8001338:	4a11      	ldr	r2, [pc, #68]	@ (8001380 <HAL_RCC_GetSysClockFreq+0xa0>)
 800133a:	5cd3      	ldrb	r3, [r2, r3]
 800133c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a0d      	ldr	r2, [pc, #52]	@ (8001378 <HAL_RCC_GetSysClockFreq+0x98>)
 8001342:	fb03 f202 	mul.w	r2, r3, r2
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	fbb2 f3f3 	udiv	r3, r2, r3
 800134c:	617b      	str	r3, [r7, #20]
 800134e:	e004      	b.n	800135a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a0c      	ldr	r2, [pc, #48]	@ (8001384 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001354:	fb02 f303 	mul.w	r3, r2, r3
 8001358:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	613b      	str	r3, [r7, #16]
      break;
 800135e:	e002      	b.n	8001366 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001360:	4b05      	ldr	r3, [pc, #20]	@ (8001378 <HAL_RCC_GetSysClockFreq+0x98>)
 8001362:	613b      	str	r3, [r7, #16]
      break;
 8001364:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001366:	693b      	ldr	r3, [r7, #16]
}
 8001368:	4618      	mov	r0, r3
 800136a:	371c      	adds	r7, #28
 800136c:	46bd      	mov	sp, r7
 800136e:	bc80      	pop	{r7}
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	40021000 	.word	0x40021000
 8001378:	007a1200 	.word	0x007a1200
 800137c:	08002214 	.word	0x08002214
 8001380:	08002224 	.word	0x08002224
 8001384:	003d0900 	.word	0x003d0900

08001388 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800138c:	4b02      	ldr	r3, [pc, #8]	@ (8001398 <HAL_RCC_GetHCLKFreq+0x10>)
 800138e:	681b      	ldr	r3, [r3, #0]
}
 8001390:	4618      	mov	r0, r3
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr
 8001398:	20000000 	.word	0x20000000

0800139c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80013a0:	f7ff fff2 	bl	8001388 <HAL_RCC_GetHCLKFreq>
 80013a4:	4602      	mov	r2, r0
 80013a6:	4b05      	ldr	r3, [pc, #20]	@ (80013bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	0a1b      	lsrs	r3, r3, #8
 80013ac:	f003 0307 	and.w	r3, r3, #7
 80013b0:	4903      	ldr	r1, [pc, #12]	@ (80013c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80013b2:	5ccb      	ldrb	r3, [r1, r3]
 80013b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40021000 	.word	0x40021000
 80013c0:	0800220c 	.word	0x0800220c

080013c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80013c8:	f7ff ffde 	bl	8001388 <HAL_RCC_GetHCLKFreq>
 80013cc:	4602      	mov	r2, r0
 80013ce:	4b05      	ldr	r3, [pc, #20]	@ (80013e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	0adb      	lsrs	r3, r3, #11
 80013d4:	f003 0307 	and.w	r3, r3, #7
 80013d8:	4903      	ldr	r1, [pc, #12]	@ (80013e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80013da:	5ccb      	ldrb	r3, [r1, r3]
 80013dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40021000 	.word	0x40021000
 80013e8:	0800220c 	.word	0x0800220c

080013ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80013f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001420 <RCC_Delay+0x34>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a0a      	ldr	r2, [pc, #40]	@ (8001424 <RCC_Delay+0x38>)
 80013fa:	fba2 2303 	umull	r2, r3, r2, r3
 80013fe:	0a5b      	lsrs	r3, r3, #9
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	fb02 f303 	mul.w	r3, r2, r3
 8001406:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001408:	bf00      	nop
  }
  while (Delay --);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	1e5a      	subs	r2, r3, #1
 800140e:	60fa      	str	r2, [r7, #12]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d1f9      	bne.n	8001408 <RCC_Delay+0x1c>
}
 8001414:	bf00      	nop
 8001416:	bf00      	nop
 8001418:	3714      	adds	r7, #20
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr
 8001420:	20000000 	.word	0x20000000
 8001424:	10624dd3 	.word	0x10624dd3

08001428 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d101      	bne.n	800143a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e042      	b.n	80014c0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001440:	b2db      	uxtb	r3, r3
 8001442:	2b00      	cmp	r3, #0
 8001444:	d106      	bne.n	8001454 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2200      	movs	r2, #0
 800144a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f7ff f848 	bl	80004e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2224      	movs	r2, #36	@ 0x24
 8001458:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	68da      	ldr	r2, [r3, #12]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800146a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f000 f971 	bl	8001754 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	691a      	ldr	r2, [r3, #16]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001480:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	695a      	ldr	r2, [r3, #20]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001490:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	68da      	ldr	r2, [r3, #12]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80014a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2220      	movs	r2, #32
 80014ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2220      	movs	r2, #32
 80014b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80014be:	2300      	movs	r3, #0
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08a      	sub	sp, #40	@ 0x28
 80014cc:	af02      	add	r7, sp, #8
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	60b9      	str	r1, [r7, #8]
 80014d2:	603b      	str	r3, [r7, #0]
 80014d4:	4613      	mov	r3, r2
 80014d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80014d8:	2300      	movs	r3, #0
 80014da:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	2b20      	cmp	r3, #32
 80014e6:	d175      	bne.n	80015d4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d002      	beq.n	80014f4 <HAL_UART_Transmit+0x2c>
 80014ee:	88fb      	ldrh	r3, [r7, #6]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d101      	bne.n	80014f8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e06e      	b.n	80015d6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2200      	movs	r2, #0
 80014fc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2221      	movs	r2, #33	@ 0x21
 8001502:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001506:	f7ff f8f1 	bl	80006ec <HAL_GetTick>
 800150a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	88fa      	ldrh	r2, [r7, #6]
 8001510:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	88fa      	ldrh	r2, [r7, #6]
 8001516:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001520:	d108      	bne.n	8001534 <HAL_UART_Transmit+0x6c>
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	691b      	ldr	r3, [r3, #16]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d104      	bne.n	8001534 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800152a:	2300      	movs	r3, #0
 800152c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	61bb      	str	r3, [r7, #24]
 8001532:	e003      	b.n	800153c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001538:	2300      	movs	r3, #0
 800153a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800153c:	e02e      	b.n	800159c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	9300      	str	r3, [sp, #0]
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	2200      	movs	r2, #0
 8001546:	2180      	movs	r1, #128	@ 0x80
 8001548:	68f8      	ldr	r0, [r7, #12]
 800154a:	f000 f848 	bl	80015de <UART_WaitOnFlagUntilTimeout>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d005      	beq.n	8001560 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2220      	movs	r2, #32
 8001558:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e03a      	b.n	80015d6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d10b      	bne.n	800157e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	881b      	ldrh	r3, [r3, #0]
 800156a:	461a      	mov	r2, r3
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001574:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	3302      	adds	r3, #2
 800157a:	61bb      	str	r3, [r7, #24]
 800157c:	e007      	b.n	800158e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	781a      	ldrb	r2, [r3, #0]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	3301      	adds	r3, #1
 800158c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001592:	b29b      	uxth	r3, r3
 8001594:	3b01      	subs	r3, #1
 8001596:	b29a      	uxth	r2, r3
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1cb      	bne.n	800153e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	9300      	str	r3, [sp, #0]
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	2200      	movs	r2, #0
 80015ae:	2140      	movs	r1, #64	@ 0x40
 80015b0:	68f8      	ldr	r0, [r7, #12]
 80015b2:	f000 f814 	bl	80015de <UART_WaitOnFlagUntilTimeout>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d005      	beq.n	80015c8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2220      	movs	r2, #32
 80015c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e006      	b.n	80015d6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2220      	movs	r2, #32
 80015cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80015d0:	2300      	movs	r3, #0
 80015d2:	e000      	b.n	80015d6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80015d4:	2302      	movs	r3, #2
  }
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3720      	adds	r7, #32
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	b086      	sub	sp, #24
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	60f8      	str	r0, [r7, #12]
 80015e6:	60b9      	str	r1, [r7, #8]
 80015e8:	603b      	str	r3, [r7, #0]
 80015ea:	4613      	mov	r3, r2
 80015ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80015ee:	e03b      	b.n	8001668 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015f0:	6a3b      	ldr	r3, [r7, #32]
 80015f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015f6:	d037      	beq.n	8001668 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015f8:	f7ff f878 	bl	80006ec <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	6a3a      	ldr	r2, [r7, #32]
 8001604:	429a      	cmp	r2, r3
 8001606:	d302      	bcc.n	800160e <UART_WaitOnFlagUntilTimeout+0x30>
 8001608:	6a3b      	ldr	r3, [r7, #32]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d101      	bne.n	8001612 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e03a      	b.n	8001688 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	f003 0304 	and.w	r3, r3, #4
 800161c:	2b00      	cmp	r3, #0
 800161e:	d023      	beq.n	8001668 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	2b80      	cmp	r3, #128	@ 0x80
 8001624:	d020      	beq.n	8001668 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	2b40      	cmp	r3, #64	@ 0x40
 800162a:	d01d      	beq.n	8001668 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0308 	and.w	r3, r3, #8
 8001636:	2b08      	cmp	r3, #8
 8001638:	d116      	bne.n	8001668 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	617b      	str	r3, [r7, #20]
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	617b      	str	r3, [r7, #20]
 800164e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001650:	68f8      	ldr	r0, [r7, #12]
 8001652:	f000 f81d 	bl	8001690 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	2208      	movs	r2, #8
 800165a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	2200      	movs	r2, #0
 8001660:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e00f      	b.n	8001688 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	4013      	ands	r3, r2
 8001672:	68ba      	ldr	r2, [r7, #8]
 8001674:	429a      	cmp	r2, r3
 8001676:	bf0c      	ite	eq
 8001678:	2301      	moveq	r3, #1
 800167a:	2300      	movne	r3, #0
 800167c:	b2db      	uxtb	r3, r3
 800167e:	461a      	mov	r2, r3
 8001680:	79fb      	ldrb	r3, [r7, #7]
 8001682:	429a      	cmp	r2, r3
 8001684:	d0b4      	beq.n	80015f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001686:	2300      	movs	r3, #0
}
 8001688:	4618      	mov	r0, r3
 800168a:	3718      	adds	r7, #24
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001690:	b480      	push	{r7}
 8001692:	b095      	sub	sp, #84	@ 0x54
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	330c      	adds	r3, #12
 800169e:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80016a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016a2:	e853 3f00 	ldrex	r3, [r3]
 80016a6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80016a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80016ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	330c      	adds	r3, #12
 80016b6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80016b8:	643a      	str	r2, [r7, #64]	@ 0x40
 80016ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80016bc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80016be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80016c0:	e841 2300 	strex	r3, r2, [r1]
 80016c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80016c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d1e5      	bne.n	8001698 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	3314      	adds	r3, #20
 80016d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80016d4:	6a3b      	ldr	r3, [r7, #32]
 80016d6:	e853 3f00 	ldrex	r3, [r3]
 80016da:	61fb      	str	r3, [r7, #28]
   return(result);
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	f023 0301 	bic.w	r3, r3, #1
 80016e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	3314      	adds	r3, #20
 80016ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80016ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80016ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80016f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80016f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016f4:	e841 2300 	strex	r3, r2, [r1]
 80016f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80016fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d1e5      	bne.n	80016cc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001704:	2b01      	cmp	r3, #1
 8001706:	d119      	bne.n	800173c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	330c      	adds	r3, #12
 800170e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	e853 3f00 	ldrex	r3, [r3]
 8001716:	60bb      	str	r3, [r7, #8]
   return(result);
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	f023 0310 	bic.w	r3, r3, #16
 800171e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	330c      	adds	r3, #12
 8001726:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001728:	61ba      	str	r2, [r7, #24]
 800172a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800172c:	6979      	ldr	r1, [r7, #20]
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	e841 2300 	strex	r3, r2, [r1]
 8001734:	613b      	str	r3, [r7, #16]
   return(result);
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d1e5      	bne.n	8001708 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2220      	movs	r2, #32
 8001740:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800174a:	bf00      	nop
 800174c:	3754      	adds	r7, #84	@ 0x54
 800174e:	46bd      	mov	sp, r7
 8001750:	bc80      	pop	{r7}
 8001752:	4770      	bx	lr

08001754 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	691b      	ldr	r3, [r3, #16]
 8001762:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	68da      	ldr	r2, [r3, #12]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	430a      	orrs	r2, r1
 8001770:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	689a      	ldr	r2, [r3, #8]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	691b      	ldr	r3, [r3, #16]
 800177a:	431a      	orrs	r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	695b      	ldr	r3, [r3, #20]
 8001780:	4313      	orrs	r3, r2
 8001782:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800178e:	f023 030c 	bic.w	r3, r3, #12
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	6812      	ldr	r2, [r2, #0]
 8001796:	68b9      	ldr	r1, [r7, #8]
 8001798:	430b      	orrs	r3, r1
 800179a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	695b      	ldr	r3, [r3, #20]
 80017a2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	699a      	ldr	r2, [r3, #24]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	430a      	orrs	r2, r1
 80017b0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a2c      	ldr	r2, [pc, #176]	@ (8001868 <UART_SetConfig+0x114>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d103      	bne.n	80017c4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80017bc:	f7ff fe02 	bl	80013c4 <HAL_RCC_GetPCLK2Freq>
 80017c0:	60f8      	str	r0, [r7, #12]
 80017c2:	e002      	b.n	80017ca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80017c4:	f7ff fdea 	bl	800139c <HAL_RCC_GetPCLK1Freq>
 80017c8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80017ca:	68fa      	ldr	r2, [r7, #12]
 80017cc:	4613      	mov	r3, r2
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	4413      	add	r3, r2
 80017d2:	009a      	lsls	r2, r3, #2
 80017d4:	441a      	add	r2, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e0:	4a22      	ldr	r2, [pc, #136]	@ (800186c <UART_SetConfig+0x118>)
 80017e2:	fba2 2303 	umull	r2, r3, r2, r3
 80017e6:	095b      	lsrs	r3, r3, #5
 80017e8:	0119      	lsls	r1, r3, #4
 80017ea:	68fa      	ldr	r2, [r7, #12]
 80017ec:	4613      	mov	r3, r2
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	4413      	add	r3, r2
 80017f2:	009a      	lsls	r2, r3, #2
 80017f4:	441a      	add	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8001800:	4b1a      	ldr	r3, [pc, #104]	@ (800186c <UART_SetConfig+0x118>)
 8001802:	fba3 0302 	umull	r0, r3, r3, r2
 8001806:	095b      	lsrs	r3, r3, #5
 8001808:	2064      	movs	r0, #100	@ 0x64
 800180a:	fb00 f303 	mul.w	r3, r0, r3
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	011b      	lsls	r3, r3, #4
 8001812:	3332      	adds	r3, #50	@ 0x32
 8001814:	4a15      	ldr	r2, [pc, #84]	@ (800186c <UART_SetConfig+0x118>)
 8001816:	fba2 2303 	umull	r2, r3, r2, r3
 800181a:	095b      	lsrs	r3, r3, #5
 800181c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001820:	4419      	add	r1, r3
 8001822:	68fa      	ldr	r2, [r7, #12]
 8001824:	4613      	mov	r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	4413      	add	r3, r2
 800182a:	009a      	lsls	r2, r3, #2
 800182c:	441a      	add	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	fbb2 f2f3 	udiv	r2, r2, r3
 8001838:	4b0c      	ldr	r3, [pc, #48]	@ (800186c <UART_SetConfig+0x118>)
 800183a:	fba3 0302 	umull	r0, r3, r3, r2
 800183e:	095b      	lsrs	r3, r3, #5
 8001840:	2064      	movs	r0, #100	@ 0x64
 8001842:	fb00 f303 	mul.w	r3, r0, r3
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	011b      	lsls	r3, r3, #4
 800184a:	3332      	adds	r3, #50	@ 0x32
 800184c:	4a07      	ldr	r2, [pc, #28]	@ (800186c <UART_SetConfig+0x118>)
 800184e:	fba2 2303 	umull	r2, r3, r2, r3
 8001852:	095b      	lsrs	r3, r3, #5
 8001854:	f003 020f 	and.w	r2, r3, #15
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	440a      	add	r2, r1
 800185e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001860:	bf00      	nop
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40013800 	.word	0x40013800
 800186c:	51eb851f 	.word	0x51eb851f

08001870 <_vsiprintf_r>:
 8001870:	b500      	push	{lr}
 8001872:	b09b      	sub	sp, #108	@ 0x6c
 8001874:	9100      	str	r1, [sp, #0]
 8001876:	9104      	str	r1, [sp, #16]
 8001878:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800187c:	9105      	str	r1, [sp, #20]
 800187e:	9102      	str	r1, [sp, #8]
 8001880:	4905      	ldr	r1, [pc, #20]	@ (8001898 <_vsiprintf_r+0x28>)
 8001882:	9103      	str	r1, [sp, #12]
 8001884:	4669      	mov	r1, sp
 8001886:	f000 f999 	bl	8001bbc <_svfiprintf_r>
 800188a:	2200      	movs	r2, #0
 800188c:	9b00      	ldr	r3, [sp, #0]
 800188e:	701a      	strb	r2, [r3, #0]
 8001890:	b01b      	add	sp, #108	@ 0x6c
 8001892:	f85d fb04 	ldr.w	pc, [sp], #4
 8001896:	bf00      	nop
 8001898:	ffff0208 	.word	0xffff0208

0800189c <vsiprintf>:
 800189c:	4613      	mov	r3, r2
 800189e:	460a      	mov	r2, r1
 80018a0:	4601      	mov	r1, r0
 80018a2:	4802      	ldr	r0, [pc, #8]	@ (80018ac <vsiprintf+0x10>)
 80018a4:	6800      	ldr	r0, [r0, #0]
 80018a6:	f7ff bfe3 	b.w	8001870 <_vsiprintf_r>
 80018aa:	bf00      	nop
 80018ac:	2000000c 	.word	0x2000000c

080018b0 <memset>:
 80018b0:	4603      	mov	r3, r0
 80018b2:	4402      	add	r2, r0
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d100      	bne.n	80018ba <memset+0xa>
 80018b8:	4770      	bx	lr
 80018ba:	f803 1b01 	strb.w	r1, [r3], #1
 80018be:	e7f9      	b.n	80018b4 <memset+0x4>

080018c0 <__errno>:
 80018c0:	4b01      	ldr	r3, [pc, #4]	@ (80018c8 <__errno+0x8>)
 80018c2:	6818      	ldr	r0, [r3, #0]
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	2000000c 	.word	0x2000000c

080018cc <__libc_init_array>:
 80018cc:	b570      	push	{r4, r5, r6, lr}
 80018ce:	2600      	movs	r6, #0
 80018d0:	4d0c      	ldr	r5, [pc, #48]	@ (8001904 <__libc_init_array+0x38>)
 80018d2:	4c0d      	ldr	r4, [pc, #52]	@ (8001908 <__libc_init_array+0x3c>)
 80018d4:	1b64      	subs	r4, r4, r5
 80018d6:	10a4      	asrs	r4, r4, #2
 80018d8:	42a6      	cmp	r6, r4
 80018da:	d109      	bne.n	80018f0 <__libc_init_array+0x24>
 80018dc:	f000 fc78 	bl	80021d0 <_init>
 80018e0:	2600      	movs	r6, #0
 80018e2:	4d0a      	ldr	r5, [pc, #40]	@ (800190c <__libc_init_array+0x40>)
 80018e4:	4c0a      	ldr	r4, [pc, #40]	@ (8001910 <__libc_init_array+0x44>)
 80018e6:	1b64      	subs	r4, r4, r5
 80018e8:	10a4      	asrs	r4, r4, #2
 80018ea:	42a6      	cmp	r6, r4
 80018ec:	d105      	bne.n	80018fa <__libc_init_array+0x2e>
 80018ee:	bd70      	pop	{r4, r5, r6, pc}
 80018f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80018f4:	4798      	blx	r3
 80018f6:	3601      	adds	r6, #1
 80018f8:	e7ee      	b.n	80018d8 <__libc_init_array+0xc>
 80018fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80018fe:	4798      	blx	r3
 8001900:	3601      	adds	r6, #1
 8001902:	e7f2      	b.n	80018ea <__libc_init_array+0x1e>
 8001904:	0800225c 	.word	0x0800225c
 8001908:	0800225c 	.word	0x0800225c
 800190c:	0800225c 	.word	0x0800225c
 8001910:	08002260 	.word	0x08002260

08001914 <__retarget_lock_acquire_recursive>:
 8001914:	4770      	bx	lr

08001916 <__retarget_lock_release_recursive>:
 8001916:	4770      	bx	lr

08001918 <_free_r>:
 8001918:	b538      	push	{r3, r4, r5, lr}
 800191a:	4605      	mov	r5, r0
 800191c:	2900      	cmp	r1, #0
 800191e:	d040      	beq.n	80019a2 <_free_r+0x8a>
 8001920:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001924:	1f0c      	subs	r4, r1, #4
 8001926:	2b00      	cmp	r3, #0
 8001928:	bfb8      	it	lt
 800192a:	18e4      	addlt	r4, r4, r3
 800192c:	f000 f8de 	bl	8001aec <__malloc_lock>
 8001930:	4a1c      	ldr	r2, [pc, #112]	@ (80019a4 <_free_r+0x8c>)
 8001932:	6813      	ldr	r3, [r2, #0]
 8001934:	b933      	cbnz	r3, 8001944 <_free_r+0x2c>
 8001936:	6063      	str	r3, [r4, #4]
 8001938:	6014      	str	r4, [r2, #0]
 800193a:	4628      	mov	r0, r5
 800193c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001940:	f000 b8da 	b.w	8001af8 <__malloc_unlock>
 8001944:	42a3      	cmp	r3, r4
 8001946:	d908      	bls.n	800195a <_free_r+0x42>
 8001948:	6820      	ldr	r0, [r4, #0]
 800194a:	1821      	adds	r1, r4, r0
 800194c:	428b      	cmp	r3, r1
 800194e:	bf01      	itttt	eq
 8001950:	6819      	ldreq	r1, [r3, #0]
 8001952:	685b      	ldreq	r3, [r3, #4]
 8001954:	1809      	addeq	r1, r1, r0
 8001956:	6021      	streq	r1, [r4, #0]
 8001958:	e7ed      	b.n	8001936 <_free_r+0x1e>
 800195a:	461a      	mov	r2, r3
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	b10b      	cbz	r3, 8001964 <_free_r+0x4c>
 8001960:	42a3      	cmp	r3, r4
 8001962:	d9fa      	bls.n	800195a <_free_r+0x42>
 8001964:	6811      	ldr	r1, [r2, #0]
 8001966:	1850      	adds	r0, r2, r1
 8001968:	42a0      	cmp	r0, r4
 800196a:	d10b      	bne.n	8001984 <_free_r+0x6c>
 800196c:	6820      	ldr	r0, [r4, #0]
 800196e:	4401      	add	r1, r0
 8001970:	1850      	adds	r0, r2, r1
 8001972:	4283      	cmp	r3, r0
 8001974:	6011      	str	r1, [r2, #0]
 8001976:	d1e0      	bne.n	800193a <_free_r+0x22>
 8001978:	6818      	ldr	r0, [r3, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	4408      	add	r0, r1
 800197e:	6010      	str	r0, [r2, #0]
 8001980:	6053      	str	r3, [r2, #4]
 8001982:	e7da      	b.n	800193a <_free_r+0x22>
 8001984:	d902      	bls.n	800198c <_free_r+0x74>
 8001986:	230c      	movs	r3, #12
 8001988:	602b      	str	r3, [r5, #0]
 800198a:	e7d6      	b.n	800193a <_free_r+0x22>
 800198c:	6820      	ldr	r0, [r4, #0]
 800198e:	1821      	adds	r1, r4, r0
 8001990:	428b      	cmp	r3, r1
 8001992:	bf01      	itttt	eq
 8001994:	6819      	ldreq	r1, [r3, #0]
 8001996:	685b      	ldreq	r3, [r3, #4]
 8001998:	1809      	addeq	r1, r1, r0
 800199a:	6021      	streq	r1, [r4, #0]
 800199c:	6063      	str	r3, [r4, #4]
 800199e:	6054      	str	r4, [r2, #4]
 80019a0:	e7cb      	b.n	800193a <_free_r+0x22>
 80019a2:	bd38      	pop	{r3, r4, r5, pc}
 80019a4:	2000025c 	.word	0x2000025c

080019a8 <sbrk_aligned>:
 80019a8:	b570      	push	{r4, r5, r6, lr}
 80019aa:	4e0f      	ldr	r6, [pc, #60]	@ (80019e8 <sbrk_aligned+0x40>)
 80019ac:	460c      	mov	r4, r1
 80019ae:	6831      	ldr	r1, [r6, #0]
 80019b0:	4605      	mov	r5, r0
 80019b2:	b911      	cbnz	r1, 80019ba <sbrk_aligned+0x12>
 80019b4:	f000 fbaa 	bl	800210c <_sbrk_r>
 80019b8:	6030      	str	r0, [r6, #0]
 80019ba:	4621      	mov	r1, r4
 80019bc:	4628      	mov	r0, r5
 80019be:	f000 fba5 	bl	800210c <_sbrk_r>
 80019c2:	1c43      	adds	r3, r0, #1
 80019c4:	d103      	bne.n	80019ce <sbrk_aligned+0x26>
 80019c6:	f04f 34ff 	mov.w	r4, #4294967295
 80019ca:	4620      	mov	r0, r4
 80019cc:	bd70      	pop	{r4, r5, r6, pc}
 80019ce:	1cc4      	adds	r4, r0, #3
 80019d0:	f024 0403 	bic.w	r4, r4, #3
 80019d4:	42a0      	cmp	r0, r4
 80019d6:	d0f8      	beq.n	80019ca <sbrk_aligned+0x22>
 80019d8:	1a21      	subs	r1, r4, r0
 80019da:	4628      	mov	r0, r5
 80019dc:	f000 fb96 	bl	800210c <_sbrk_r>
 80019e0:	3001      	adds	r0, #1
 80019e2:	d1f2      	bne.n	80019ca <sbrk_aligned+0x22>
 80019e4:	e7ef      	b.n	80019c6 <sbrk_aligned+0x1e>
 80019e6:	bf00      	nop
 80019e8:	20000258 	.word	0x20000258

080019ec <_malloc_r>:
 80019ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80019f0:	1ccd      	adds	r5, r1, #3
 80019f2:	f025 0503 	bic.w	r5, r5, #3
 80019f6:	3508      	adds	r5, #8
 80019f8:	2d0c      	cmp	r5, #12
 80019fa:	bf38      	it	cc
 80019fc:	250c      	movcc	r5, #12
 80019fe:	2d00      	cmp	r5, #0
 8001a00:	4606      	mov	r6, r0
 8001a02:	db01      	blt.n	8001a08 <_malloc_r+0x1c>
 8001a04:	42a9      	cmp	r1, r5
 8001a06:	d904      	bls.n	8001a12 <_malloc_r+0x26>
 8001a08:	230c      	movs	r3, #12
 8001a0a:	6033      	str	r3, [r6, #0]
 8001a0c:	2000      	movs	r0, #0
 8001a0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001a12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001ae8 <_malloc_r+0xfc>
 8001a16:	f000 f869 	bl	8001aec <__malloc_lock>
 8001a1a:	f8d8 3000 	ldr.w	r3, [r8]
 8001a1e:	461c      	mov	r4, r3
 8001a20:	bb44      	cbnz	r4, 8001a74 <_malloc_r+0x88>
 8001a22:	4629      	mov	r1, r5
 8001a24:	4630      	mov	r0, r6
 8001a26:	f7ff ffbf 	bl	80019a8 <sbrk_aligned>
 8001a2a:	1c43      	adds	r3, r0, #1
 8001a2c:	4604      	mov	r4, r0
 8001a2e:	d158      	bne.n	8001ae2 <_malloc_r+0xf6>
 8001a30:	f8d8 4000 	ldr.w	r4, [r8]
 8001a34:	4627      	mov	r7, r4
 8001a36:	2f00      	cmp	r7, #0
 8001a38:	d143      	bne.n	8001ac2 <_malloc_r+0xd6>
 8001a3a:	2c00      	cmp	r4, #0
 8001a3c:	d04b      	beq.n	8001ad6 <_malloc_r+0xea>
 8001a3e:	6823      	ldr	r3, [r4, #0]
 8001a40:	4639      	mov	r1, r7
 8001a42:	4630      	mov	r0, r6
 8001a44:	eb04 0903 	add.w	r9, r4, r3
 8001a48:	f000 fb60 	bl	800210c <_sbrk_r>
 8001a4c:	4581      	cmp	r9, r0
 8001a4e:	d142      	bne.n	8001ad6 <_malloc_r+0xea>
 8001a50:	6821      	ldr	r1, [r4, #0]
 8001a52:	4630      	mov	r0, r6
 8001a54:	1a6d      	subs	r5, r5, r1
 8001a56:	4629      	mov	r1, r5
 8001a58:	f7ff ffa6 	bl	80019a8 <sbrk_aligned>
 8001a5c:	3001      	adds	r0, #1
 8001a5e:	d03a      	beq.n	8001ad6 <_malloc_r+0xea>
 8001a60:	6823      	ldr	r3, [r4, #0]
 8001a62:	442b      	add	r3, r5
 8001a64:	6023      	str	r3, [r4, #0]
 8001a66:	f8d8 3000 	ldr.w	r3, [r8]
 8001a6a:	685a      	ldr	r2, [r3, #4]
 8001a6c:	bb62      	cbnz	r2, 8001ac8 <_malloc_r+0xdc>
 8001a6e:	f8c8 7000 	str.w	r7, [r8]
 8001a72:	e00f      	b.n	8001a94 <_malloc_r+0xa8>
 8001a74:	6822      	ldr	r2, [r4, #0]
 8001a76:	1b52      	subs	r2, r2, r5
 8001a78:	d420      	bmi.n	8001abc <_malloc_r+0xd0>
 8001a7a:	2a0b      	cmp	r2, #11
 8001a7c:	d917      	bls.n	8001aae <_malloc_r+0xc2>
 8001a7e:	1961      	adds	r1, r4, r5
 8001a80:	42a3      	cmp	r3, r4
 8001a82:	6025      	str	r5, [r4, #0]
 8001a84:	bf18      	it	ne
 8001a86:	6059      	strne	r1, [r3, #4]
 8001a88:	6863      	ldr	r3, [r4, #4]
 8001a8a:	bf08      	it	eq
 8001a8c:	f8c8 1000 	streq.w	r1, [r8]
 8001a90:	5162      	str	r2, [r4, r5]
 8001a92:	604b      	str	r3, [r1, #4]
 8001a94:	4630      	mov	r0, r6
 8001a96:	f000 f82f 	bl	8001af8 <__malloc_unlock>
 8001a9a:	f104 000b 	add.w	r0, r4, #11
 8001a9e:	1d23      	adds	r3, r4, #4
 8001aa0:	f020 0007 	bic.w	r0, r0, #7
 8001aa4:	1ac2      	subs	r2, r0, r3
 8001aa6:	bf1c      	itt	ne
 8001aa8:	1a1b      	subne	r3, r3, r0
 8001aaa:	50a3      	strne	r3, [r4, r2]
 8001aac:	e7af      	b.n	8001a0e <_malloc_r+0x22>
 8001aae:	6862      	ldr	r2, [r4, #4]
 8001ab0:	42a3      	cmp	r3, r4
 8001ab2:	bf0c      	ite	eq
 8001ab4:	f8c8 2000 	streq.w	r2, [r8]
 8001ab8:	605a      	strne	r2, [r3, #4]
 8001aba:	e7eb      	b.n	8001a94 <_malloc_r+0xa8>
 8001abc:	4623      	mov	r3, r4
 8001abe:	6864      	ldr	r4, [r4, #4]
 8001ac0:	e7ae      	b.n	8001a20 <_malloc_r+0x34>
 8001ac2:	463c      	mov	r4, r7
 8001ac4:	687f      	ldr	r7, [r7, #4]
 8001ac6:	e7b6      	b.n	8001a36 <_malloc_r+0x4a>
 8001ac8:	461a      	mov	r2, r3
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	42a3      	cmp	r3, r4
 8001ace:	d1fb      	bne.n	8001ac8 <_malloc_r+0xdc>
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	6053      	str	r3, [r2, #4]
 8001ad4:	e7de      	b.n	8001a94 <_malloc_r+0xa8>
 8001ad6:	230c      	movs	r3, #12
 8001ad8:	4630      	mov	r0, r6
 8001ada:	6033      	str	r3, [r6, #0]
 8001adc:	f000 f80c 	bl	8001af8 <__malloc_unlock>
 8001ae0:	e794      	b.n	8001a0c <_malloc_r+0x20>
 8001ae2:	6005      	str	r5, [r0, #0]
 8001ae4:	e7d6      	b.n	8001a94 <_malloc_r+0xa8>
 8001ae6:	bf00      	nop
 8001ae8:	2000025c 	.word	0x2000025c

08001aec <__malloc_lock>:
 8001aec:	4801      	ldr	r0, [pc, #4]	@ (8001af4 <__malloc_lock+0x8>)
 8001aee:	f7ff bf11 	b.w	8001914 <__retarget_lock_acquire_recursive>
 8001af2:	bf00      	nop
 8001af4:	20000254 	.word	0x20000254

08001af8 <__malloc_unlock>:
 8001af8:	4801      	ldr	r0, [pc, #4]	@ (8001b00 <__malloc_unlock+0x8>)
 8001afa:	f7ff bf0c 	b.w	8001916 <__retarget_lock_release_recursive>
 8001afe:	bf00      	nop
 8001b00:	20000254 	.word	0x20000254

08001b04 <__ssputs_r>:
 8001b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b08:	461f      	mov	r7, r3
 8001b0a:	688e      	ldr	r6, [r1, #8]
 8001b0c:	4682      	mov	sl, r0
 8001b0e:	42be      	cmp	r6, r7
 8001b10:	460c      	mov	r4, r1
 8001b12:	4690      	mov	r8, r2
 8001b14:	680b      	ldr	r3, [r1, #0]
 8001b16:	d82d      	bhi.n	8001b74 <__ssputs_r+0x70>
 8001b18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001b1c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8001b20:	d026      	beq.n	8001b70 <__ssputs_r+0x6c>
 8001b22:	6965      	ldr	r5, [r4, #20]
 8001b24:	6909      	ldr	r1, [r1, #16]
 8001b26:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001b2a:	eba3 0901 	sub.w	r9, r3, r1
 8001b2e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001b32:	1c7b      	adds	r3, r7, #1
 8001b34:	444b      	add	r3, r9
 8001b36:	106d      	asrs	r5, r5, #1
 8001b38:	429d      	cmp	r5, r3
 8001b3a:	bf38      	it	cc
 8001b3c:	461d      	movcc	r5, r3
 8001b3e:	0553      	lsls	r3, r2, #21
 8001b40:	d527      	bpl.n	8001b92 <__ssputs_r+0x8e>
 8001b42:	4629      	mov	r1, r5
 8001b44:	f7ff ff52 	bl	80019ec <_malloc_r>
 8001b48:	4606      	mov	r6, r0
 8001b4a:	b360      	cbz	r0, 8001ba6 <__ssputs_r+0xa2>
 8001b4c:	464a      	mov	r2, r9
 8001b4e:	6921      	ldr	r1, [r4, #16]
 8001b50:	f000 fafa 	bl	8002148 <memcpy>
 8001b54:	89a3      	ldrh	r3, [r4, #12]
 8001b56:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8001b5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b5e:	81a3      	strh	r3, [r4, #12]
 8001b60:	6126      	str	r6, [r4, #16]
 8001b62:	444e      	add	r6, r9
 8001b64:	6026      	str	r6, [r4, #0]
 8001b66:	463e      	mov	r6, r7
 8001b68:	6165      	str	r5, [r4, #20]
 8001b6a:	eba5 0509 	sub.w	r5, r5, r9
 8001b6e:	60a5      	str	r5, [r4, #8]
 8001b70:	42be      	cmp	r6, r7
 8001b72:	d900      	bls.n	8001b76 <__ssputs_r+0x72>
 8001b74:	463e      	mov	r6, r7
 8001b76:	4632      	mov	r2, r6
 8001b78:	4641      	mov	r1, r8
 8001b7a:	6820      	ldr	r0, [r4, #0]
 8001b7c:	f000 faac 	bl	80020d8 <memmove>
 8001b80:	2000      	movs	r0, #0
 8001b82:	68a3      	ldr	r3, [r4, #8]
 8001b84:	1b9b      	subs	r3, r3, r6
 8001b86:	60a3      	str	r3, [r4, #8]
 8001b88:	6823      	ldr	r3, [r4, #0]
 8001b8a:	4433      	add	r3, r6
 8001b8c:	6023      	str	r3, [r4, #0]
 8001b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b92:	462a      	mov	r2, r5
 8001b94:	f000 fae6 	bl	8002164 <_realloc_r>
 8001b98:	4606      	mov	r6, r0
 8001b9a:	2800      	cmp	r0, #0
 8001b9c:	d1e0      	bne.n	8001b60 <__ssputs_r+0x5c>
 8001b9e:	4650      	mov	r0, sl
 8001ba0:	6921      	ldr	r1, [r4, #16]
 8001ba2:	f7ff feb9 	bl	8001918 <_free_r>
 8001ba6:	230c      	movs	r3, #12
 8001ba8:	f8ca 3000 	str.w	r3, [sl]
 8001bac:	89a3      	ldrh	r3, [r4, #12]
 8001bae:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001bb6:	81a3      	strh	r3, [r4, #12]
 8001bb8:	e7e9      	b.n	8001b8e <__ssputs_r+0x8a>
	...

08001bbc <_svfiprintf_r>:
 8001bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bc0:	4698      	mov	r8, r3
 8001bc2:	898b      	ldrh	r3, [r1, #12]
 8001bc4:	4607      	mov	r7, r0
 8001bc6:	061b      	lsls	r3, r3, #24
 8001bc8:	460d      	mov	r5, r1
 8001bca:	4614      	mov	r4, r2
 8001bcc:	b09d      	sub	sp, #116	@ 0x74
 8001bce:	d510      	bpl.n	8001bf2 <_svfiprintf_r+0x36>
 8001bd0:	690b      	ldr	r3, [r1, #16]
 8001bd2:	b973      	cbnz	r3, 8001bf2 <_svfiprintf_r+0x36>
 8001bd4:	2140      	movs	r1, #64	@ 0x40
 8001bd6:	f7ff ff09 	bl	80019ec <_malloc_r>
 8001bda:	6028      	str	r0, [r5, #0]
 8001bdc:	6128      	str	r0, [r5, #16]
 8001bde:	b930      	cbnz	r0, 8001bee <_svfiprintf_r+0x32>
 8001be0:	230c      	movs	r3, #12
 8001be2:	603b      	str	r3, [r7, #0]
 8001be4:	f04f 30ff 	mov.w	r0, #4294967295
 8001be8:	b01d      	add	sp, #116	@ 0x74
 8001bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001bee:	2340      	movs	r3, #64	@ 0x40
 8001bf0:	616b      	str	r3, [r5, #20]
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	9309      	str	r3, [sp, #36]	@ 0x24
 8001bf6:	2320      	movs	r3, #32
 8001bf8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001bfc:	2330      	movs	r3, #48	@ 0x30
 8001bfe:	f04f 0901 	mov.w	r9, #1
 8001c02:	f8cd 800c 	str.w	r8, [sp, #12]
 8001c06:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8001da0 <_svfiprintf_r+0x1e4>
 8001c0a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001c0e:	4623      	mov	r3, r4
 8001c10:	469a      	mov	sl, r3
 8001c12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001c16:	b10a      	cbz	r2, 8001c1c <_svfiprintf_r+0x60>
 8001c18:	2a25      	cmp	r2, #37	@ 0x25
 8001c1a:	d1f9      	bne.n	8001c10 <_svfiprintf_r+0x54>
 8001c1c:	ebba 0b04 	subs.w	fp, sl, r4
 8001c20:	d00b      	beq.n	8001c3a <_svfiprintf_r+0x7e>
 8001c22:	465b      	mov	r3, fp
 8001c24:	4622      	mov	r2, r4
 8001c26:	4629      	mov	r1, r5
 8001c28:	4638      	mov	r0, r7
 8001c2a:	f7ff ff6b 	bl	8001b04 <__ssputs_r>
 8001c2e:	3001      	adds	r0, #1
 8001c30:	f000 80a7 	beq.w	8001d82 <_svfiprintf_r+0x1c6>
 8001c34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001c36:	445a      	add	r2, fp
 8001c38:	9209      	str	r2, [sp, #36]	@ 0x24
 8001c3a:	f89a 3000 	ldrb.w	r3, [sl]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	f000 809f 	beq.w	8001d82 <_svfiprintf_r+0x1c6>
 8001c44:	2300      	movs	r3, #0
 8001c46:	f04f 32ff 	mov.w	r2, #4294967295
 8001c4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001c4e:	f10a 0a01 	add.w	sl, sl, #1
 8001c52:	9304      	str	r3, [sp, #16]
 8001c54:	9307      	str	r3, [sp, #28]
 8001c56:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001c5a:	931a      	str	r3, [sp, #104]	@ 0x68
 8001c5c:	4654      	mov	r4, sl
 8001c5e:	2205      	movs	r2, #5
 8001c60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c64:	484e      	ldr	r0, [pc, #312]	@ (8001da0 <_svfiprintf_r+0x1e4>)
 8001c66:	f000 fa61 	bl	800212c <memchr>
 8001c6a:	9a04      	ldr	r2, [sp, #16]
 8001c6c:	b9d8      	cbnz	r0, 8001ca6 <_svfiprintf_r+0xea>
 8001c6e:	06d0      	lsls	r0, r2, #27
 8001c70:	bf44      	itt	mi
 8001c72:	2320      	movmi	r3, #32
 8001c74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001c78:	0711      	lsls	r1, r2, #28
 8001c7a:	bf44      	itt	mi
 8001c7c:	232b      	movmi	r3, #43	@ 0x2b
 8001c7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001c82:	f89a 3000 	ldrb.w	r3, [sl]
 8001c86:	2b2a      	cmp	r3, #42	@ 0x2a
 8001c88:	d015      	beq.n	8001cb6 <_svfiprintf_r+0xfa>
 8001c8a:	4654      	mov	r4, sl
 8001c8c:	2000      	movs	r0, #0
 8001c8e:	f04f 0c0a 	mov.w	ip, #10
 8001c92:	9a07      	ldr	r2, [sp, #28]
 8001c94:	4621      	mov	r1, r4
 8001c96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001c9a:	3b30      	subs	r3, #48	@ 0x30
 8001c9c:	2b09      	cmp	r3, #9
 8001c9e:	d94b      	bls.n	8001d38 <_svfiprintf_r+0x17c>
 8001ca0:	b1b0      	cbz	r0, 8001cd0 <_svfiprintf_r+0x114>
 8001ca2:	9207      	str	r2, [sp, #28]
 8001ca4:	e014      	b.n	8001cd0 <_svfiprintf_r+0x114>
 8001ca6:	eba0 0308 	sub.w	r3, r0, r8
 8001caa:	fa09 f303 	lsl.w	r3, r9, r3
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	46a2      	mov	sl, r4
 8001cb2:	9304      	str	r3, [sp, #16]
 8001cb4:	e7d2      	b.n	8001c5c <_svfiprintf_r+0xa0>
 8001cb6:	9b03      	ldr	r3, [sp, #12]
 8001cb8:	1d19      	adds	r1, r3, #4
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	9103      	str	r1, [sp, #12]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	bfbb      	ittet	lt
 8001cc2:	425b      	neglt	r3, r3
 8001cc4:	f042 0202 	orrlt.w	r2, r2, #2
 8001cc8:	9307      	strge	r3, [sp, #28]
 8001cca:	9307      	strlt	r3, [sp, #28]
 8001ccc:	bfb8      	it	lt
 8001cce:	9204      	strlt	r2, [sp, #16]
 8001cd0:	7823      	ldrb	r3, [r4, #0]
 8001cd2:	2b2e      	cmp	r3, #46	@ 0x2e
 8001cd4:	d10a      	bne.n	8001cec <_svfiprintf_r+0x130>
 8001cd6:	7863      	ldrb	r3, [r4, #1]
 8001cd8:	2b2a      	cmp	r3, #42	@ 0x2a
 8001cda:	d132      	bne.n	8001d42 <_svfiprintf_r+0x186>
 8001cdc:	9b03      	ldr	r3, [sp, #12]
 8001cde:	3402      	adds	r4, #2
 8001ce0:	1d1a      	adds	r2, r3, #4
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	9203      	str	r2, [sp, #12]
 8001ce6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001cea:	9305      	str	r3, [sp, #20]
 8001cec:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8001da4 <_svfiprintf_r+0x1e8>
 8001cf0:	2203      	movs	r2, #3
 8001cf2:	4650      	mov	r0, sl
 8001cf4:	7821      	ldrb	r1, [r4, #0]
 8001cf6:	f000 fa19 	bl	800212c <memchr>
 8001cfa:	b138      	cbz	r0, 8001d0c <_svfiprintf_r+0x150>
 8001cfc:	2240      	movs	r2, #64	@ 0x40
 8001cfe:	9b04      	ldr	r3, [sp, #16]
 8001d00:	eba0 000a 	sub.w	r0, r0, sl
 8001d04:	4082      	lsls	r2, r0
 8001d06:	4313      	orrs	r3, r2
 8001d08:	3401      	adds	r4, #1
 8001d0a:	9304      	str	r3, [sp, #16]
 8001d0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d10:	2206      	movs	r2, #6
 8001d12:	4825      	ldr	r0, [pc, #148]	@ (8001da8 <_svfiprintf_r+0x1ec>)
 8001d14:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001d18:	f000 fa08 	bl	800212c <memchr>
 8001d1c:	2800      	cmp	r0, #0
 8001d1e:	d036      	beq.n	8001d8e <_svfiprintf_r+0x1d2>
 8001d20:	4b22      	ldr	r3, [pc, #136]	@ (8001dac <_svfiprintf_r+0x1f0>)
 8001d22:	bb1b      	cbnz	r3, 8001d6c <_svfiprintf_r+0x1b0>
 8001d24:	9b03      	ldr	r3, [sp, #12]
 8001d26:	3307      	adds	r3, #7
 8001d28:	f023 0307 	bic.w	r3, r3, #7
 8001d2c:	3308      	adds	r3, #8
 8001d2e:	9303      	str	r3, [sp, #12]
 8001d30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001d32:	4433      	add	r3, r6
 8001d34:	9309      	str	r3, [sp, #36]	@ 0x24
 8001d36:	e76a      	b.n	8001c0e <_svfiprintf_r+0x52>
 8001d38:	460c      	mov	r4, r1
 8001d3a:	2001      	movs	r0, #1
 8001d3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8001d40:	e7a8      	b.n	8001c94 <_svfiprintf_r+0xd8>
 8001d42:	2300      	movs	r3, #0
 8001d44:	f04f 0c0a 	mov.w	ip, #10
 8001d48:	4619      	mov	r1, r3
 8001d4a:	3401      	adds	r4, #1
 8001d4c:	9305      	str	r3, [sp, #20]
 8001d4e:	4620      	mov	r0, r4
 8001d50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001d54:	3a30      	subs	r2, #48	@ 0x30
 8001d56:	2a09      	cmp	r2, #9
 8001d58:	d903      	bls.n	8001d62 <_svfiprintf_r+0x1a6>
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d0c6      	beq.n	8001cec <_svfiprintf_r+0x130>
 8001d5e:	9105      	str	r1, [sp, #20]
 8001d60:	e7c4      	b.n	8001cec <_svfiprintf_r+0x130>
 8001d62:	4604      	mov	r4, r0
 8001d64:	2301      	movs	r3, #1
 8001d66:	fb0c 2101 	mla	r1, ip, r1, r2
 8001d6a:	e7f0      	b.n	8001d4e <_svfiprintf_r+0x192>
 8001d6c:	ab03      	add	r3, sp, #12
 8001d6e:	9300      	str	r3, [sp, #0]
 8001d70:	462a      	mov	r2, r5
 8001d72:	4638      	mov	r0, r7
 8001d74:	4b0e      	ldr	r3, [pc, #56]	@ (8001db0 <_svfiprintf_r+0x1f4>)
 8001d76:	a904      	add	r1, sp, #16
 8001d78:	f3af 8000 	nop.w
 8001d7c:	1c42      	adds	r2, r0, #1
 8001d7e:	4606      	mov	r6, r0
 8001d80:	d1d6      	bne.n	8001d30 <_svfiprintf_r+0x174>
 8001d82:	89ab      	ldrh	r3, [r5, #12]
 8001d84:	065b      	lsls	r3, r3, #25
 8001d86:	f53f af2d 	bmi.w	8001be4 <_svfiprintf_r+0x28>
 8001d8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001d8c:	e72c      	b.n	8001be8 <_svfiprintf_r+0x2c>
 8001d8e:	ab03      	add	r3, sp, #12
 8001d90:	9300      	str	r3, [sp, #0]
 8001d92:	462a      	mov	r2, r5
 8001d94:	4638      	mov	r0, r7
 8001d96:	4b06      	ldr	r3, [pc, #24]	@ (8001db0 <_svfiprintf_r+0x1f4>)
 8001d98:	a904      	add	r1, sp, #16
 8001d9a:	f000 f87d 	bl	8001e98 <_printf_i>
 8001d9e:	e7ed      	b.n	8001d7c <_svfiprintf_r+0x1c0>
 8001da0:	08002226 	.word	0x08002226
 8001da4:	0800222c 	.word	0x0800222c
 8001da8:	08002230 	.word	0x08002230
 8001dac:	00000000 	.word	0x00000000
 8001db0:	08001b05 	.word	0x08001b05

08001db4 <_printf_common>:
 8001db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001db8:	4616      	mov	r6, r2
 8001dba:	4698      	mov	r8, r3
 8001dbc:	688a      	ldr	r2, [r1, #8]
 8001dbe:	690b      	ldr	r3, [r1, #16]
 8001dc0:	4607      	mov	r7, r0
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	bfb8      	it	lt
 8001dc6:	4613      	movlt	r3, r2
 8001dc8:	6033      	str	r3, [r6, #0]
 8001dca:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001dce:	460c      	mov	r4, r1
 8001dd0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001dd4:	b10a      	cbz	r2, 8001dda <_printf_common+0x26>
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	6033      	str	r3, [r6, #0]
 8001dda:	6823      	ldr	r3, [r4, #0]
 8001ddc:	0699      	lsls	r1, r3, #26
 8001dde:	bf42      	ittt	mi
 8001de0:	6833      	ldrmi	r3, [r6, #0]
 8001de2:	3302      	addmi	r3, #2
 8001de4:	6033      	strmi	r3, [r6, #0]
 8001de6:	6825      	ldr	r5, [r4, #0]
 8001de8:	f015 0506 	ands.w	r5, r5, #6
 8001dec:	d106      	bne.n	8001dfc <_printf_common+0x48>
 8001dee:	f104 0a19 	add.w	sl, r4, #25
 8001df2:	68e3      	ldr	r3, [r4, #12]
 8001df4:	6832      	ldr	r2, [r6, #0]
 8001df6:	1a9b      	subs	r3, r3, r2
 8001df8:	42ab      	cmp	r3, r5
 8001dfa:	dc2b      	bgt.n	8001e54 <_printf_common+0xa0>
 8001dfc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001e00:	6822      	ldr	r2, [r4, #0]
 8001e02:	3b00      	subs	r3, #0
 8001e04:	bf18      	it	ne
 8001e06:	2301      	movne	r3, #1
 8001e08:	0692      	lsls	r2, r2, #26
 8001e0a:	d430      	bmi.n	8001e6e <_printf_common+0xba>
 8001e0c:	4641      	mov	r1, r8
 8001e0e:	4638      	mov	r0, r7
 8001e10:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001e14:	47c8      	blx	r9
 8001e16:	3001      	adds	r0, #1
 8001e18:	d023      	beq.n	8001e62 <_printf_common+0xae>
 8001e1a:	6823      	ldr	r3, [r4, #0]
 8001e1c:	6922      	ldr	r2, [r4, #16]
 8001e1e:	f003 0306 	and.w	r3, r3, #6
 8001e22:	2b04      	cmp	r3, #4
 8001e24:	bf14      	ite	ne
 8001e26:	2500      	movne	r5, #0
 8001e28:	6833      	ldreq	r3, [r6, #0]
 8001e2a:	f04f 0600 	mov.w	r6, #0
 8001e2e:	bf08      	it	eq
 8001e30:	68e5      	ldreq	r5, [r4, #12]
 8001e32:	f104 041a 	add.w	r4, r4, #26
 8001e36:	bf08      	it	eq
 8001e38:	1aed      	subeq	r5, r5, r3
 8001e3a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8001e3e:	bf08      	it	eq
 8001e40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001e44:	4293      	cmp	r3, r2
 8001e46:	bfc4      	itt	gt
 8001e48:	1a9b      	subgt	r3, r3, r2
 8001e4a:	18ed      	addgt	r5, r5, r3
 8001e4c:	42b5      	cmp	r5, r6
 8001e4e:	d11a      	bne.n	8001e86 <_printf_common+0xd2>
 8001e50:	2000      	movs	r0, #0
 8001e52:	e008      	b.n	8001e66 <_printf_common+0xb2>
 8001e54:	2301      	movs	r3, #1
 8001e56:	4652      	mov	r2, sl
 8001e58:	4641      	mov	r1, r8
 8001e5a:	4638      	mov	r0, r7
 8001e5c:	47c8      	blx	r9
 8001e5e:	3001      	adds	r0, #1
 8001e60:	d103      	bne.n	8001e6a <_printf_common+0xb6>
 8001e62:	f04f 30ff 	mov.w	r0, #4294967295
 8001e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e6a:	3501      	adds	r5, #1
 8001e6c:	e7c1      	b.n	8001df2 <_printf_common+0x3e>
 8001e6e:	2030      	movs	r0, #48	@ 0x30
 8001e70:	18e1      	adds	r1, r4, r3
 8001e72:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001e76:	1c5a      	adds	r2, r3, #1
 8001e78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001e7c:	4422      	add	r2, r4
 8001e7e:	3302      	adds	r3, #2
 8001e80:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001e84:	e7c2      	b.n	8001e0c <_printf_common+0x58>
 8001e86:	2301      	movs	r3, #1
 8001e88:	4622      	mov	r2, r4
 8001e8a:	4641      	mov	r1, r8
 8001e8c:	4638      	mov	r0, r7
 8001e8e:	47c8      	blx	r9
 8001e90:	3001      	adds	r0, #1
 8001e92:	d0e6      	beq.n	8001e62 <_printf_common+0xae>
 8001e94:	3601      	adds	r6, #1
 8001e96:	e7d9      	b.n	8001e4c <_printf_common+0x98>

08001e98 <_printf_i>:
 8001e98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001e9c:	7e0f      	ldrb	r7, [r1, #24]
 8001e9e:	4691      	mov	r9, r2
 8001ea0:	2f78      	cmp	r7, #120	@ 0x78
 8001ea2:	4680      	mov	r8, r0
 8001ea4:	460c      	mov	r4, r1
 8001ea6:	469a      	mov	sl, r3
 8001ea8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001eaa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001eae:	d807      	bhi.n	8001ec0 <_printf_i+0x28>
 8001eb0:	2f62      	cmp	r7, #98	@ 0x62
 8001eb2:	d80a      	bhi.n	8001eca <_printf_i+0x32>
 8001eb4:	2f00      	cmp	r7, #0
 8001eb6:	f000 80d3 	beq.w	8002060 <_printf_i+0x1c8>
 8001eba:	2f58      	cmp	r7, #88	@ 0x58
 8001ebc:	f000 80ba 	beq.w	8002034 <_printf_i+0x19c>
 8001ec0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001ec4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001ec8:	e03a      	b.n	8001f40 <_printf_i+0xa8>
 8001eca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001ece:	2b15      	cmp	r3, #21
 8001ed0:	d8f6      	bhi.n	8001ec0 <_printf_i+0x28>
 8001ed2:	a101      	add	r1, pc, #4	@ (adr r1, 8001ed8 <_printf_i+0x40>)
 8001ed4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001ed8:	08001f31 	.word	0x08001f31
 8001edc:	08001f45 	.word	0x08001f45
 8001ee0:	08001ec1 	.word	0x08001ec1
 8001ee4:	08001ec1 	.word	0x08001ec1
 8001ee8:	08001ec1 	.word	0x08001ec1
 8001eec:	08001ec1 	.word	0x08001ec1
 8001ef0:	08001f45 	.word	0x08001f45
 8001ef4:	08001ec1 	.word	0x08001ec1
 8001ef8:	08001ec1 	.word	0x08001ec1
 8001efc:	08001ec1 	.word	0x08001ec1
 8001f00:	08001ec1 	.word	0x08001ec1
 8001f04:	08002047 	.word	0x08002047
 8001f08:	08001f6f 	.word	0x08001f6f
 8001f0c:	08002001 	.word	0x08002001
 8001f10:	08001ec1 	.word	0x08001ec1
 8001f14:	08001ec1 	.word	0x08001ec1
 8001f18:	08002069 	.word	0x08002069
 8001f1c:	08001ec1 	.word	0x08001ec1
 8001f20:	08001f6f 	.word	0x08001f6f
 8001f24:	08001ec1 	.word	0x08001ec1
 8001f28:	08001ec1 	.word	0x08001ec1
 8001f2c:	08002009 	.word	0x08002009
 8001f30:	6833      	ldr	r3, [r6, #0]
 8001f32:	1d1a      	adds	r2, r3, #4
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	6032      	str	r2, [r6, #0]
 8001f38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001f3c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001f40:	2301      	movs	r3, #1
 8001f42:	e09e      	b.n	8002082 <_printf_i+0x1ea>
 8001f44:	6833      	ldr	r3, [r6, #0]
 8001f46:	6820      	ldr	r0, [r4, #0]
 8001f48:	1d19      	adds	r1, r3, #4
 8001f4a:	6031      	str	r1, [r6, #0]
 8001f4c:	0606      	lsls	r6, r0, #24
 8001f4e:	d501      	bpl.n	8001f54 <_printf_i+0xbc>
 8001f50:	681d      	ldr	r5, [r3, #0]
 8001f52:	e003      	b.n	8001f5c <_printf_i+0xc4>
 8001f54:	0645      	lsls	r5, r0, #25
 8001f56:	d5fb      	bpl.n	8001f50 <_printf_i+0xb8>
 8001f58:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001f5c:	2d00      	cmp	r5, #0
 8001f5e:	da03      	bge.n	8001f68 <_printf_i+0xd0>
 8001f60:	232d      	movs	r3, #45	@ 0x2d
 8001f62:	426d      	negs	r5, r5
 8001f64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001f68:	230a      	movs	r3, #10
 8001f6a:	4859      	ldr	r0, [pc, #356]	@ (80020d0 <_printf_i+0x238>)
 8001f6c:	e011      	b.n	8001f92 <_printf_i+0xfa>
 8001f6e:	6821      	ldr	r1, [r4, #0]
 8001f70:	6833      	ldr	r3, [r6, #0]
 8001f72:	0608      	lsls	r0, r1, #24
 8001f74:	f853 5b04 	ldr.w	r5, [r3], #4
 8001f78:	d402      	bmi.n	8001f80 <_printf_i+0xe8>
 8001f7a:	0649      	lsls	r1, r1, #25
 8001f7c:	bf48      	it	mi
 8001f7e:	b2ad      	uxthmi	r5, r5
 8001f80:	2f6f      	cmp	r7, #111	@ 0x6f
 8001f82:	6033      	str	r3, [r6, #0]
 8001f84:	bf14      	ite	ne
 8001f86:	230a      	movne	r3, #10
 8001f88:	2308      	moveq	r3, #8
 8001f8a:	4851      	ldr	r0, [pc, #324]	@ (80020d0 <_printf_i+0x238>)
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001f92:	6866      	ldr	r6, [r4, #4]
 8001f94:	2e00      	cmp	r6, #0
 8001f96:	bfa8      	it	ge
 8001f98:	6821      	ldrge	r1, [r4, #0]
 8001f9a:	60a6      	str	r6, [r4, #8]
 8001f9c:	bfa4      	itt	ge
 8001f9e:	f021 0104 	bicge.w	r1, r1, #4
 8001fa2:	6021      	strge	r1, [r4, #0]
 8001fa4:	b90d      	cbnz	r5, 8001faa <_printf_i+0x112>
 8001fa6:	2e00      	cmp	r6, #0
 8001fa8:	d04b      	beq.n	8002042 <_printf_i+0x1aa>
 8001faa:	4616      	mov	r6, r2
 8001fac:	fbb5 f1f3 	udiv	r1, r5, r3
 8001fb0:	fb03 5711 	mls	r7, r3, r1, r5
 8001fb4:	5dc7      	ldrb	r7, [r0, r7]
 8001fb6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001fba:	462f      	mov	r7, r5
 8001fbc:	42bb      	cmp	r3, r7
 8001fbe:	460d      	mov	r5, r1
 8001fc0:	d9f4      	bls.n	8001fac <_printf_i+0x114>
 8001fc2:	2b08      	cmp	r3, #8
 8001fc4:	d10b      	bne.n	8001fde <_printf_i+0x146>
 8001fc6:	6823      	ldr	r3, [r4, #0]
 8001fc8:	07df      	lsls	r7, r3, #31
 8001fca:	d508      	bpl.n	8001fde <_printf_i+0x146>
 8001fcc:	6923      	ldr	r3, [r4, #16]
 8001fce:	6861      	ldr	r1, [r4, #4]
 8001fd0:	4299      	cmp	r1, r3
 8001fd2:	bfde      	ittt	le
 8001fd4:	2330      	movle	r3, #48	@ 0x30
 8001fd6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001fda:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001fde:	1b92      	subs	r2, r2, r6
 8001fe0:	6122      	str	r2, [r4, #16]
 8001fe2:	464b      	mov	r3, r9
 8001fe4:	4621      	mov	r1, r4
 8001fe6:	4640      	mov	r0, r8
 8001fe8:	f8cd a000 	str.w	sl, [sp]
 8001fec:	aa03      	add	r2, sp, #12
 8001fee:	f7ff fee1 	bl	8001db4 <_printf_common>
 8001ff2:	3001      	adds	r0, #1
 8001ff4:	d14a      	bne.n	800208c <_printf_i+0x1f4>
 8001ff6:	f04f 30ff 	mov.w	r0, #4294967295
 8001ffa:	b004      	add	sp, #16
 8001ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002000:	6823      	ldr	r3, [r4, #0]
 8002002:	f043 0320 	orr.w	r3, r3, #32
 8002006:	6023      	str	r3, [r4, #0]
 8002008:	2778      	movs	r7, #120	@ 0x78
 800200a:	4832      	ldr	r0, [pc, #200]	@ (80020d4 <_printf_i+0x23c>)
 800200c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002010:	6823      	ldr	r3, [r4, #0]
 8002012:	6831      	ldr	r1, [r6, #0]
 8002014:	061f      	lsls	r7, r3, #24
 8002016:	f851 5b04 	ldr.w	r5, [r1], #4
 800201a:	d402      	bmi.n	8002022 <_printf_i+0x18a>
 800201c:	065f      	lsls	r7, r3, #25
 800201e:	bf48      	it	mi
 8002020:	b2ad      	uxthmi	r5, r5
 8002022:	6031      	str	r1, [r6, #0]
 8002024:	07d9      	lsls	r1, r3, #31
 8002026:	bf44      	itt	mi
 8002028:	f043 0320 	orrmi.w	r3, r3, #32
 800202c:	6023      	strmi	r3, [r4, #0]
 800202e:	b11d      	cbz	r5, 8002038 <_printf_i+0x1a0>
 8002030:	2310      	movs	r3, #16
 8002032:	e7ab      	b.n	8001f8c <_printf_i+0xf4>
 8002034:	4826      	ldr	r0, [pc, #152]	@ (80020d0 <_printf_i+0x238>)
 8002036:	e7e9      	b.n	800200c <_printf_i+0x174>
 8002038:	6823      	ldr	r3, [r4, #0]
 800203a:	f023 0320 	bic.w	r3, r3, #32
 800203e:	6023      	str	r3, [r4, #0]
 8002040:	e7f6      	b.n	8002030 <_printf_i+0x198>
 8002042:	4616      	mov	r6, r2
 8002044:	e7bd      	b.n	8001fc2 <_printf_i+0x12a>
 8002046:	6833      	ldr	r3, [r6, #0]
 8002048:	6825      	ldr	r5, [r4, #0]
 800204a:	1d18      	adds	r0, r3, #4
 800204c:	6961      	ldr	r1, [r4, #20]
 800204e:	6030      	str	r0, [r6, #0]
 8002050:	062e      	lsls	r6, r5, #24
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	d501      	bpl.n	800205a <_printf_i+0x1c2>
 8002056:	6019      	str	r1, [r3, #0]
 8002058:	e002      	b.n	8002060 <_printf_i+0x1c8>
 800205a:	0668      	lsls	r0, r5, #25
 800205c:	d5fb      	bpl.n	8002056 <_printf_i+0x1be>
 800205e:	8019      	strh	r1, [r3, #0]
 8002060:	2300      	movs	r3, #0
 8002062:	4616      	mov	r6, r2
 8002064:	6123      	str	r3, [r4, #16]
 8002066:	e7bc      	b.n	8001fe2 <_printf_i+0x14a>
 8002068:	6833      	ldr	r3, [r6, #0]
 800206a:	2100      	movs	r1, #0
 800206c:	1d1a      	adds	r2, r3, #4
 800206e:	6032      	str	r2, [r6, #0]
 8002070:	681e      	ldr	r6, [r3, #0]
 8002072:	6862      	ldr	r2, [r4, #4]
 8002074:	4630      	mov	r0, r6
 8002076:	f000 f859 	bl	800212c <memchr>
 800207a:	b108      	cbz	r0, 8002080 <_printf_i+0x1e8>
 800207c:	1b80      	subs	r0, r0, r6
 800207e:	6060      	str	r0, [r4, #4]
 8002080:	6863      	ldr	r3, [r4, #4]
 8002082:	6123      	str	r3, [r4, #16]
 8002084:	2300      	movs	r3, #0
 8002086:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800208a:	e7aa      	b.n	8001fe2 <_printf_i+0x14a>
 800208c:	4632      	mov	r2, r6
 800208e:	4649      	mov	r1, r9
 8002090:	4640      	mov	r0, r8
 8002092:	6923      	ldr	r3, [r4, #16]
 8002094:	47d0      	blx	sl
 8002096:	3001      	adds	r0, #1
 8002098:	d0ad      	beq.n	8001ff6 <_printf_i+0x15e>
 800209a:	6823      	ldr	r3, [r4, #0]
 800209c:	079b      	lsls	r3, r3, #30
 800209e:	d413      	bmi.n	80020c8 <_printf_i+0x230>
 80020a0:	68e0      	ldr	r0, [r4, #12]
 80020a2:	9b03      	ldr	r3, [sp, #12]
 80020a4:	4298      	cmp	r0, r3
 80020a6:	bfb8      	it	lt
 80020a8:	4618      	movlt	r0, r3
 80020aa:	e7a6      	b.n	8001ffa <_printf_i+0x162>
 80020ac:	2301      	movs	r3, #1
 80020ae:	4632      	mov	r2, r6
 80020b0:	4649      	mov	r1, r9
 80020b2:	4640      	mov	r0, r8
 80020b4:	47d0      	blx	sl
 80020b6:	3001      	adds	r0, #1
 80020b8:	d09d      	beq.n	8001ff6 <_printf_i+0x15e>
 80020ba:	3501      	adds	r5, #1
 80020bc:	68e3      	ldr	r3, [r4, #12]
 80020be:	9903      	ldr	r1, [sp, #12]
 80020c0:	1a5b      	subs	r3, r3, r1
 80020c2:	42ab      	cmp	r3, r5
 80020c4:	dcf2      	bgt.n	80020ac <_printf_i+0x214>
 80020c6:	e7eb      	b.n	80020a0 <_printf_i+0x208>
 80020c8:	2500      	movs	r5, #0
 80020ca:	f104 0619 	add.w	r6, r4, #25
 80020ce:	e7f5      	b.n	80020bc <_printf_i+0x224>
 80020d0:	08002237 	.word	0x08002237
 80020d4:	08002248 	.word	0x08002248

080020d8 <memmove>:
 80020d8:	4288      	cmp	r0, r1
 80020da:	b510      	push	{r4, lr}
 80020dc:	eb01 0402 	add.w	r4, r1, r2
 80020e0:	d902      	bls.n	80020e8 <memmove+0x10>
 80020e2:	4284      	cmp	r4, r0
 80020e4:	4623      	mov	r3, r4
 80020e6:	d807      	bhi.n	80020f8 <memmove+0x20>
 80020e8:	1e43      	subs	r3, r0, #1
 80020ea:	42a1      	cmp	r1, r4
 80020ec:	d008      	beq.n	8002100 <memmove+0x28>
 80020ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80020f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80020f6:	e7f8      	b.n	80020ea <memmove+0x12>
 80020f8:	4601      	mov	r1, r0
 80020fa:	4402      	add	r2, r0
 80020fc:	428a      	cmp	r2, r1
 80020fe:	d100      	bne.n	8002102 <memmove+0x2a>
 8002100:	bd10      	pop	{r4, pc}
 8002102:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002106:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800210a:	e7f7      	b.n	80020fc <memmove+0x24>

0800210c <_sbrk_r>:
 800210c:	b538      	push	{r3, r4, r5, lr}
 800210e:	2300      	movs	r3, #0
 8002110:	4d05      	ldr	r5, [pc, #20]	@ (8002128 <_sbrk_r+0x1c>)
 8002112:	4604      	mov	r4, r0
 8002114:	4608      	mov	r0, r1
 8002116:	602b      	str	r3, [r5, #0]
 8002118:	f7fe f954 	bl	80003c4 <_sbrk>
 800211c:	1c43      	adds	r3, r0, #1
 800211e:	d102      	bne.n	8002126 <_sbrk_r+0x1a>
 8002120:	682b      	ldr	r3, [r5, #0]
 8002122:	b103      	cbz	r3, 8002126 <_sbrk_r+0x1a>
 8002124:	6023      	str	r3, [r4, #0]
 8002126:	bd38      	pop	{r3, r4, r5, pc}
 8002128:	20000250 	.word	0x20000250

0800212c <memchr>:
 800212c:	4603      	mov	r3, r0
 800212e:	b510      	push	{r4, lr}
 8002130:	b2c9      	uxtb	r1, r1
 8002132:	4402      	add	r2, r0
 8002134:	4293      	cmp	r3, r2
 8002136:	4618      	mov	r0, r3
 8002138:	d101      	bne.n	800213e <memchr+0x12>
 800213a:	2000      	movs	r0, #0
 800213c:	e003      	b.n	8002146 <memchr+0x1a>
 800213e:	7804      	ldrb	r4, [r0, #0]
 8002140:	3301      	adds	r3, #1
 8002142:	428c      	cmp	r4, r1
 8002144:	d1f6      	bne.n	8002134 <memchr+0x8>
 8002146:	bd10      	pop	{r4, pc}

08002148 <memcpy>:
 8002148:	440a      	add	r2, r1
 800214a:	4291      	cmp	r1, r2
 800214c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002150:	d100      	bne.n	8002154 <memcpy+0xc>
 8002152:	4770      	bx	lr
 8002154:	b510      	push	{r4, lr}
 8002156:	f811 4b01 	ldrb.w	r4, [r1], #1
 800215a:	4291      	cmp	r1, r2
 800215c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002160:	d1f9      	bne.n	8002156 <memcpy+0xe>
 8002162:	bd10      	pop	{r4, pc}

08002164 <_realloc_r>:
 8002164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002168:	4680      	mov	r8, r0
 800216a:	4615      	mov	r5, r2
 800216c:	460c      	mov	r4, r1
 800216e:	b921      	cbnz	r1, 800217a <_realloc_r+0x16>
 8002170:	4611      	mov	r1, r2
 8002172:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002176:	f7ff bc39 	b.w	80019ec <_malloc_r>
 800217a:	b92a      	cbnz	r2, 8002188 <_realloc_r+0x24>
 800217c:	f7ff fbcc 	bl	8001918 <_free_r>
 8002180:	2400      	movs	r4, #0
 8002182:	4620      	mov	r0, r4
 8002184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002188:	f000 f81a 	bl	80021c0 <_malloc_usable_size_r>
 800218c:	4285      	cmp	r5, r0
 800218e:	4606      	mov	r6, r0
 8002190:	d802      	bhi.n	8002198 <_realloc_r+0x34>
 8002192:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8002196:	d8f4      	bhi.n	8002182 <_realloc_r+0x1e>
 8002198:	4629      	mov	r1, r5
 800219a:	4640      	mov	r0, r8
 800219c:	f7ff fc26 	bl	80019ec <_malloc_r>
 80021a0:	4607      	mov	r7, r0
 80021a2:	2800      	cmp	r0, #0
 80021a4:	d0ec      	beq.n	8002180 <_realloc_r+0x1c>
 80021a6:	42b5      	cmp	r5, r6
 80021a8:	462a      	mov	r2, r5
 80021aa:	4621      	mov	r1, r4
 80021ac:	bf28      	it	cs
 80021ae:	4632      	movcs	r2, r6
 80021b0:	f7ff ffca 	bl	8002148 <memcpy>
 80021b4:	4621      	mov	r1, r4
 80021b6:	4640      	mov	r0, r8
 80021b8:	f7ff fbae 	bl	8001918 <_free_r>
 80021bc:	463c      	mov	r4, r7
 80021be:	e7e0      	b.n	8002182 <_realloc_r+0x1e>

080021c0 <_malloc_usable_size_r>:
 80021c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80021c4:	1f18      	subs	r0, r3, #4
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	bfbc      	itt	lt
 80021ca:	580b      	ldrlt	r3, [r1, r0]
 80021cc:	18c0      	addlt	r0, r0, r3
 80021ce:	4770      	bx	lr

080021d0 <_init>:
 80021d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021d2:	bf00      	nop
 80021d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021d6:	bc08      	pop	{r3}
 80021d8:	469e      	mov	lr, r3
 80021da:	4770      	bx	lr

080021dc <_fini>:
 80021dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021de:	bf00      	nop
 80021e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021e2:	bc08      	pop	{r3}
 80021e4:	469e      	mov	lr, r3
 80021e6:	4770      	bx	lr
